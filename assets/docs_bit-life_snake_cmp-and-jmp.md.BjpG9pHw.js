import{_ as a,c as i,ae as n,o as e}from"./chunks/framework.BzDBnRMZ.js";const r=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/bit-life/snake/cmp-and-jmp.md","filePath":"docs/bit-life/snake/cmp-and-jmp.md"}'),t={name:"docs/bit-life/snake/cmp-and-jmp.md"};function l(p,s,h,d,c,k){return e(),i("div",null,s[0]||(s[0]=[n(`<p>本节介绍了 <code>cmp</code> 的基本用法，以及 <code>jz/je</code> 和 <code>jnz/jne</code> 两个条件跳转指令，完成了判断用户输入的代码并封装了一个之后会经常用到的清屏函数 <code>ClearScreen()</code></p><h2 id="cmp-基本用法" tabindex="-1">cmp 基本用法 <a class="header-anchor" href="#cmp-基本用法" aria-label="Permalink to &quot;cmp 基本用法&quot;">​</a></h2><p>cmp 可以用来比较源操作数和目的操作数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cmp 目的操作数, 源操作数</span></span></code></pre></div><blockquote><p>cmp 指令在源操作数和目的操作数之间执行隐含的减法操作</p><p>在比较两个<strong>无符号操作数</strong>的时候，会影响两个 CPU 标志位—— 零标志位 ZF 和 进位标志位 CF</p><table tabindex="0"><thead><tr><th>CMP 的结果</th><th>ZF</th><th>CF</th></tr></thead><tbody><tr><td>目的 &lt; 源</td><td>0</td><td>1</td></tr><tr><td>目的 &gt; 源</td><td>0</td><td>0</td></tr><tr><td>目的 = 源</td><td>1</td><td>0</td></tr></tbody></table><p>—— 摘自 《Intel 汇编语言程序设计（第 5 版）》144 页</p></blockquote><h2 id="jz-je-和-jnz-jne" tabindex="-1">jz/je 和 jnz/jne <a class="header-anchor" href="#jz-je-和-jnz-jne" aria-label="Permalink to &quot;jz/je 和 jnz/jne&quot;">​</a></h2><p>于是我们可以通过判断这些标志位来进行条件跳转，下面是两个命令</p><ul><li>jz —— 如果 <code>源操作数 - 目的操作数 = 0</code>，即 ZF = 1 ，则进行跳转</li><li>jnz —— 如果 <code>源操作数 - 目的操作数 ≠ 0</code> ，即 ZF = 0，则进行跳转</li></ul><p>值得注意的是，命令 <code>jz</code> 和 <code>je</code> 是等价的，而 <code>jnz</code> 和 <code>jne</code> 是等价的</p><blockquote><p>对于实现同一功能但指令助记符有两种形式的情况，在程序中究竟选用哪一种，视习惯或用途而定。例如，对于指令 JZ/JE LABEL，当比较两数相等转义时，常使用 JE，当比较某数为 0 转移时，常使用 JZ</p><p>—— 摘自《汇编语言与接口技术（李元章）》104 页</p></blockquote><h2 id="判断-scanf-的输入类型" tabindex="-1">判断 scanf 的输入类型 <a class="header-anchor" href="#判断-scanf-的输入类型" aria-label="Permalink to &quot;判断 scanf 的输入类型&quot;">​</a></h2><p>了解 cmp 和 je/jne 指令之后，我们现在可以判断 scanf 的输入了，在 <code>snake.cpp</code> 中，判断用户输入的代码放到了函数 <code>enterGame()</code> 中，要看它翻译的汇编结果，你可以查看 <code>snake.asm</code> 的函数 <code>enterGame()</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> enterGame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selection;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> paramater </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	__asm {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	enter_game:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		call showMainMenu</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 获取用户选择</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		lea eax, dword ptr ds : [selection]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		push eax</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mov ecx, dword ptr ds : [paramater]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		push ecx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		call scanf</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		add esp, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 判断用户的选择</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mov eax, dword ptr ds : [selection]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		cmp eax, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		je start_game</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		cmp eax, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		je end_game</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 处理非法选择</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		call handleIllegalSelection</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		jmp enter_game</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	start_game :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		call startGame</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	end_game :</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		call endGame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="延时和清屏" tabindex="-1">延时和清屏 <a class="header-anchor" href="#延时和清屏" aria-label="Permalink to &quot;延时和清屏&quot;">​</a></h2><p>在上述代码中，处理非法输入时会调用 <code>handleIllegalSelection()</code> 函数，而在 <code>handleIllegalSelection()</code> 中调用了 <code>Sleep()</code> 函数和 <code>clearScreen()</code> 函数</p><h3 id="延时函数" tabindex="-1">延时函数 <a class="header-anchor" href="#延时函数" aria-label="Permalink to &quot;延时函数&quot;">​</a></h3><p>延时调用的是 Windows 提供的函数 <code>Sleep()</code> ，它的头文件是 <code>windows.h</code> ，参数以毫秒为单位</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">push </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">call Sleep</span></span></code></pre></div><p>上述代码的意思就是延时 2s</p><p>值得注意的是，Windows 的函数<strong>自己会平衡堆栈</strong>，所以不需要像我们调用 scanf 或者 printf 那样还要加上 <code>add esp,4</code></p><h3 id="清屏函数" tabindex="-1">清屏函数 <a class="header-anchor" href="#清屏函数" aria-label="Permalink to &quot;清屏函数&quot;">​</a></h3><p>清屏函数调用的是函数 <code>system()</code>，它的头文件是 <code>stdlib.h</code></p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cls&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>windows.h</code> 中调用了这个函数，因此我们平时可以再 Windows 的命令提示符窗口下直接输入 <code>cls</code> 清屏</p><p>现在我们来封装这个函数，把它作为一个工具供以后使用</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clearScreenUtil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clearScreen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cls&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	__asm {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mov eax, dword ptr ds : [clearScreen]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		push eax</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		call system</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		add esp, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,26)]))}const E=a(t,[["render",l]]);export{r as __pageData,E as default};
