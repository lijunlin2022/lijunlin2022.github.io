import{_ as i,c as a,ae as e,o as t}from"./chunks/framework.BzDBnRMZ.js";const c=JSON.parse('{"title":"移动端适配 lib-flexible 和 postcss-pxtorem","description":"","frontmatter":{},"headers":[],"relativePath":"doc/tmp/_2023-11-14-px-to-rem/index.md","filePath":"doc/tmp/_2023-11-14-px-to-rem/index.md"}'),p={name:"doc/tmp/_2023-11-14-px-to-rem/index.md"};function l(n,s,r,h,o,k){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="移动端适配-lib-flexible-和-postcss-pxtorem" tabindex="-1">移动端适配 lib-flexible 和 postcss-pxtorem <a class="header-anchor" href="#移动端适配-lib-flexible-和-postcss-pxtorem" aria-label="Permalink to &quot;移动端适配 lib-flexible 和 postcss-pxtorem&quot;">​</a></h1><p>最近看到，一般移动端适配会配合使用阿里的 <a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noreferrer">lib-flexible</a> 和 <a href="https://www.npmjs.com/package/postcss-pxtorem" target="_blank" rel="noreferrer">postcss-pxtorem</a> 插件。</p><p>我们假设我们的手机屏幕和设计稿都是 750px 的。</p><p>使用 lib-flexible，会将 html 的 font-size 设置为屏幕宽度 <code>clientWidth</code> 的 1/10。也就是说 1rem = 75px;</p><p>这时候，如果设计稿上有一个元素 width 是 200px 的，为了让手机屏幕能够适配。我们需要写 CSS 的时候，直接将 width 写成 (200 / 75)rem。</p><p>当然，手动将 px 换算为 rem 还是对我们写代码还是很不友好。这时候就可以使用 postcss-pxtorem 了。我们将这个插件配置的 rootValue 写为 75px，这个插件会自动将我们的 css 从 px 换算为 rem。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pxtorem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;postcss-pxtorem&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pxtorem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ rootValue: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, propList: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], selectorBlackList: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,7)]))}const E=i(p,[["render",l]]);export{c as __pageData,E as default};
