import{_ as a,c as s,ae as i,o as t}from"./chunks/framework.BzDBnRMZ.js";const _=JSON.parse('{"title":"渲染流程","description":"","frontmatter":{},"headers":[],"relativePath":"docs/webgl/12-render-process/index.md","filePath":"docs/webgl/12-render-process/index.md"}'),l={name:"docs/webgl/12-render-process/index.md"};function n(r,e,p,d,o,c){return t(),s("div",null,e[0]||(e[0]=[i(`<h1 id="渲染流程" tabindex="-1">渲染流程 <a class="header-anchor" href="#渲染流程" aria-label="Permalink to &quot;渲染流程&quot;">​</a></h1><div class="language-mermaid vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flowchart LR;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">顶点坐标 --&gt; 图元装配 --&gt; 光栅化 --&gt; 图形绘制;</span></span></code></pre></div><ul><li>图元装配流程：</li></ul><p>将独立的顶点坐标装配成几何图形，图形的类别由 gl.drawArrays() 第一个参数确定</p><ul><li>光栅化</li></ul><p>这一步是将装配好的图形转换为片元。</p><ul><li>剔除</li></ul><p>如果是不透明物体，背面对于观察者来说是不可见的。那么在渲染过程中，就会将不可见的部分剔除，不参与绘制。节省渲染开销。</p><ul><li>裁剪</li></ul><p>在可视范围外的事物，是看不到的。图形生成后，有的部分可能位于可视范围之外，这一部分会被剪裁掉，不参与绘制。</p>`,10)]))}const u=a(l,[["render",n]]);export{_ as __pageData,u as default};
