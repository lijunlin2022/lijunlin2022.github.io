import{_ as e,c as t,ae as a,o as s}from"./chunks/framework.BzDBnRMZ.js";const g=JSON.parse('{"title":"cookie，local storage 和 session storage","description":"","frontmatter":{},"headers":[],"relativePath":"docs/js/客户端存储/Cookie.md","filePath":"docs/js/客户端存储/Cookie.md"}'),i={name:"docs/js/客户端存储/Cookie.md"};function l(r,o,d,c,n,h){return s(),t("div",null,o[0]||(o[0]=[a('<h1 id="cookie-local-storage-和-session-storage" tabindex="-1">cookie，local storage 和 session storage <a class="header-anchor" href="#cookie-local-storage-和-session-storage" aria-label="Permalink to &quot;cookie，local storage 和 session storage&quot;">​</a></h1><h2 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h2><p>cookie 本身用于浏览器和 server 通讯, 被 “借用” 到本地存储来</p><p>cookie 的特点:</p><ul><li>存储大小: 最大 4KB</li><li>http 请求时需要发送到服务端, 增加请求数据量</li><li>只能使用 <code>document.cookie = &#39;...&#39;</code> 来修改</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.cookie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a=100;b=200;&quot;</span></span></code></pre></div><p>对于 cookie 来说, 用 document.cookie 来设置时, 同一个 key 设置值会导致值被覆盖, 不同的 key 设置值则将 key 和 value 追加到 cookie 中</p><h2 id="localstorage-和-sessionstorage" tabindex="-1">LocalStorage 和 SessionStorage <a class="header-anchor" href="#localstorage-和-sessionstorage" aria-label="Permalink to &quot;LocalStorage 和 SessionStorage&quot;">​</a></h2><p>localStorage 和 sessionStorage 是 HTML5 为存储设计的, 它们的特点为:</p><ul><li>存储大小: 最大可存 5MB</li><li>不会随着 http 请求被发送出去</li><li>API 简单易用 <code>setitem(&quot;key&quot;, &quot;value&quot;)</code> 和 <code>getitem(&quot;key&quot;)</code></li></ul><p>不过 localStorage 个 session 有些区别:</p><ul><li><code>localStorage</code> 数据会永久存储, 除非代码或手动删除</li><li><code>sessionStorage</code> 数据只存在于当前会话, 浏览器关闭则清空</li></ul><p>一般我们用 <code>sessionStorage</code> 要多一些</p><h2 id="cookie-localstorage-和-sessionstorage-对比" tabindex="-1">Cookie LocalStorage 和 SessionStorage 对比 <a class="header-anchor" href="#cookie-localstorage-和-sessionstorage-对比" aria-label="Permalink to &quot;Cookie LocalStorage 和 SessionStorage 对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th></th><th>cookie</th><th>localStorage</th><th>sessionStorage</th></tr></thead><tbody><tr><td>存储大小</td><td>4KB</td><td>5MB</td><td>5MB</td></tr><tr><td>是否随请求头提交</td><td>是</td><td>否</td><td>否</td></tr><tr><td>是否可以跨页</td><td>是</td><td>是</td><td>否</td></tr><tr><td>API</td><td>粗陋</td><td>精细</td><td>精细</td></tr></tbody></table>',15)]))}const p=e(i,[["render",l]]);export{g as __pageData,p as default};
