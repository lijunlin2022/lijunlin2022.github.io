import{_ as i,c as a,ae as t,o as e}from"./chunks/framework.BzDBnRMZ.js";const c=JSON.parse('{"title":"布尔操作符","description":"","frontmatter":{},"headers":[],"relativePath":"docs/js/语言基础/操作符/布尔操作符.md","filePath":"docs/js/语言基础/操作符/布尔操作符.md"}'),l={name:"docs/js/语言基础/操作符/布尔操作符.md"};function n(h,s,p,d,k,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="布尔操作符" tabindex="-1">布尔操作符 <a class="header-anchor" href="#布尔操作符" aria-label="Permalink to &quot;布尔操作符&quot;">​</a></h1><h2 id="逻辑与" tabindex="-1">逻辑与 <a class="header-anchor" href="#逻辑与" aria-label="Permalink to &quot;逻辑与&quot;">​</a></h2><p>逻辑与操作遵循如下真值表：</p><table tabindex="0"><thead><tr><th>第一个操作数</th><th>第二个操作数</th><th>结果</th></tr></thead><tbody><tr><td>true</td><td>true</td><td>true</td></tr><tr><td>true</td><td>false</td><td>false</td></tr><tr><td>false</td><td>true</td><td>false</td></tr><tr><td>false</td><td>false</td><td>false</td></tr></tbody></table><p>逻辑与操作符可用于任何类型的操作数，不限于布尔值。<strong>如果有操作数不是布尔值</strong>，<strong>则逻辑与并不一定会返回布尔值</strong>，而是遵循如下规则：</p><ul><li>如果第一个操作数是对象，则返回第二个操作数</li><li>如果第二个操作数是对象，则只有第一个操作数求值为 true 才会返回该对象</li><li>如果两个操作数都是对象，则返回第二个操作数</li><li>如果有一个操作数是 null，则返回 null</li><li>如果有一个操作数是 <code>NaN</code>，则返回 <code>NaN</code></li><li>如果有一个操作数是 undefined，则返回 undefined</li></ul><p><strong>逻辑与操作符是一种短路运算符</strong>，意思就是<strong>如果第一个操作数决定了结果</strong>，<strong>那么就永远不会对第二个操作数求值</strong>。</p><p>对于逻辑与来说，如果第一个操作数是 false，那么无论第二个操作数是什么值，结果也不可能等于 true。</p><p>举例如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someUndeclaredVariable)		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里会出错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不会执行这一行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 变量 found 的值是 true，逻辑与操作符会继续求值变量 someUndeclaredVariable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由于 someUndeclaredVariable 没有定义，不能对它应用逻辑与操作符，因此就报错了</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someUndeclaredVariable)		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不会出错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会执行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 即使 someUndeclaredVariable 没有定义，由于第一个操作数是 false，逻辑与操作符也不会对它求值</span></span></code></pre></div><h2 id="逻辑或" tabindex="-1">逻辑或 <a class="header-anchor" href="#逻辑或" aria-label="Permalink to &quot;逻辑或&quot;">​</a></h2><p>逻辑或遵循如下真值表：</p><table tabindex="0"><thead><tr><th>第一个操作符</th><th>第二个操作符</th><th>结果</th></tr></thead><tbody><tr><td>true</td><td>true</td><td>true</td></tr><tr><td>true</td><td>false</td><td>true</td></tr><tr><td>false</td><td>true</td><td>true</td></tr><tr><td>false</td><td>false</td><td>false</td></tr></tbody></table><p>与逻辑与类似，<strong>如果有一个操作数不是布尔值</strong>，<strong>那么逻辑或也不一定返回布尔值</strong>。它遵循如下规则：</p><ul><li>如果第一个操作数是对象，则返回第一个操作数</li><li>如果第一个操作数求值为 false，则返回第二个操作数</li><li>如果两个操作数都是对象，则返回第一个操作数</li><li>如果两个操作数都是 null，则返回 null</li><li>如果两个操作数都是 <code>NaN</code>，则返回 <code>NaN</code></li><li>如果两个操作数都是 undefined，则返回 undefined</li></ul><p>同样与逻辑与类似，逻辑或操作数也具有短路的性质。只不过对于逻辑或而言，第一个操作数求值为 true，第二个操作数就不会被求值了。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someUndeclaredVariable)		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不会出错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会执行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 即使 someUndeclaredVariable 没有定义，由于第一个操作数是 true，逻辑或操作符也不会对它求值</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someUndeclaredVariable)		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 会出错</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)		</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不会执行</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 变量 found 的值是 false，逻辑或操作符会继续求值变量 someUndeclaredVariable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由于 someUndeclaredVariable 没有定义，不能对它应用逻辑或操作符，因此就报错了</span></span></code></pre></div><p><strong>利用逻辑或的性质</strong>，<strong>可以避免给变量赋值 null 或 undefined</strong>，例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> preferredObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backupObject</span></span></code></pre></div><ul><li><code>preferedObject</code> 包含首选的值</li><li><code>backupObject</code> 包含备用的值</li><li>如果 <code>preferedObject</code> 的值不是 null 或者 undefined，则它的值回赋给 <code>myObject</code></li><li>如果 <code>preferedObject</code> 的值是 null 或者 undefined，则 <code>backupObject</code> 的值会赋给 <code>myObject</code></li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p>本节内容根据 《JavaScript 高级程序设计（第 4 版）》整理。</p>`,24)]))}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
