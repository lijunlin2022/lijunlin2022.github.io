import{_ as i,c as a,ae as e,o as t}from"./chunks/framework.BzDBnRMZ.js";const p="/assets/keep.3lpJ1Mu_.gif",n="/assets/variable-height-swiper.DkNb09MF.gif",r="/assets/principle-1.BkXhUuC1.png",l="/assets/principle-2.CYnyYwnO.png",h="/assets/12306.BAjJ4xXU.gif",o="/assets/pdd.BXry94eR.gif",_=JSON.parse('{"title":"H5、小程序高度变化的轮播图如何实现？","description":"","frontmatter":{"tags":["H5","小程序"]},"headers":[],"relativePath":"blog/2024/02/16/index.md","filePath":"blog/2024/02/16/index.md"}'),d={name:"blog/2024/02/16/index.md"};function k(c,s,g,E,u,m){return t(),a("div",null,s[0]||(s[0]=[e('<h1 id="h5、小程序高度变化的轮播图如何实现" tabindex="-1">H5、小程序高度变化的轮播图如何实现？ <a class="header-anchor" href="#h5、小程序高度变化的轮播图如何实现" aria-label="Permalink to &quot;H5、小程序高度变化的轮播图如何实现？&quot;">​</a></h1><p>高度固定的轮播图，你肯定经常看到、并知道怎么实现，但高度变化的轮播图呢？</p><p>下面是 Keep 的课程轮播，可以看到 9 号的视频数量是少于 10 号和 11 号的，所以 9 号的视频列表的高度比 10、11 号低。当播放到 9 号课程时，下方的主题课程模块会往上移动，填充 9 号视频列表下方的空白。</p><p><img src="'+p+'" alt=""></p><p>如果你也想实现高度变化的轮播，看完这篇文章，你一定有所收获。我会先解释高度变化的原理，然后说明关键实现，最后再给出原生 H5 和小程序的示例代码。代码效果如下：</p><p><img src="'+n+'" alt=""></p><h2 id="高度变化的原理" tabindex="-1">高度变化的原理 <a class="header-anchor" href="#高度变化的原理" aria-label="Permalink to &quot;高度变化的原理&quot;">​</a></h2><p>如果我们使用 flex 布局实现轮播图 Swiper，那么轮播图的整体高度，将会是最高一项的高度。</p><p>如下图，虚线框代表 Swiper，Swiper 的每项都是 List。如果播放到某个 List，这个 List 就是红色。可以看到，只要轮播图播放到较矮项，就会在较矮项底部留下大量空白。</p><p><img src="'+r+'" alt=""></p><p>要想实现高度变化、且不留下空白的轮播图，原理很简单。我们只需要在轮播切换时，先获取即将播放的 List 高度，再把它的高度设置给 Swiper。</p><p>如下图，播放到某个 List，Swiper 的高度就变为这个 List 的高度。我们还可以给 Swiper 设置 <code>overflow: hidden;</code>，把找出 Swiper 范围的元素都给隐藏掉。</p><p><img src="'+l+`" alt=""></p><h2 id="关键代码实现" tabindex="-1">关键代码实现 <a class="header-anchor" href="#关键代码实现" aria-label="Permalink to &quot;关键代码实现&quot;">​</a></h2><p>聊完原理，我们来看代码，代码非常简单粗暴。</p><p>我们为每个 List 都设置了一个 id，利用 id 获取 List 的高度再设置到 Swiper 元素的 style 上。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> updateSwiperHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">currentIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`#item-box-\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentIndex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).offsetHeight</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  swiper.style.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;px&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  swiper.style.overflow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hidden&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="代码示例" tabindex="-1">代码示例 <a class="header-anchor" href="#代码示例" aria-label="Permalink to &quot;代码示例&quot;">​</a></h2><p>现在来看 H5 和小程序的代码示例，为了突出重点，我并没有实现左右滑动，而是用点击切换近似替代：</p><h3 id="h5" tabindex="-1">H5 <a class="header-anchor" href="#h5" aria-label="Permalink to &quot;H5&quot;">​</a></h3><p><a href="https://codepen.io/lijunlin2022/pen/qBLxNzQ" target="_blank" rel="noreferrer">高度变化的轮播图 | codepen</a></p><h3 id="小程序" tabindex="-1">小程序 <a class="header-anchor" href="#小程序" aria-label="Permalink to &quot;小程序&quot;">​</a></h3><p><a href="https://developers.weixin.qq.com/s/ct5irIm37eOg" target="_blank" rel="noreferrer">高度变化的轮播图 | 小程序</a></p><div class="info custom-block"><p class="custom-block-title">INFO</p><ul><li>小程序有原生的 swiper 组件，我们可以给 swiper 直接增加一个 style，在 style 中改变 swiper 的高度。</li><li>小程序没有 <code>querySelector()</code>，可以用 <code>createSelectorQuery()</code> 替代。</li></ul></div><h2 id="额外提醒" tabindex="-1">额外提醒 <a class="header-anchor" href="#额外提醒" aria-label="Permalink to &quot;额外提醒&quot;">​</a></h2><p>高度变化的轮播图非常少见，你需要仔细斟酌什么时候用它。</p><p>如果你不需要左右滑动，那么选择 Tab + 卡片更适合。比如 12306 的选项卡，高度就是不等的：</p><p><img src="`+h+'" alt=""></p><p>如果轮播每一项轮播都是长列表，且随着用户上拉屏幕，列表加载的数据还会变多。<strong>这种轮播通常还是固定高度（100vh）的轮播</strong>。</p><p>它在拼多多、淘宝、京东上很常见。你需要注意，<strong>这种轮播每一项需要自带滚动条，否则处理列表滚动条会变得非常麻烦</strong>。因为这种轮播往往要求记住用户在每个列表滚动的位置，如果轮播共用滚动条，左右切换会有一个很明显的闪烁。</p><p><img src="'+o+'" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文我们介绍了高度变化的轮播图实现原理——先获取对应轮播项的高度，再改变轮播图的整体高度。之后我们给出了 H5 和小程序的代码示例。</p>',33)]))}const b=i(d,[["render",k]]);export{_ as __pageData,b as default};
