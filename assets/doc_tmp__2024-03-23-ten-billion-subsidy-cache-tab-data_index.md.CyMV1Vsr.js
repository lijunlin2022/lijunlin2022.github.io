import{_ as i,c as a,ae as n,o as t}from"./chunks/framework.BzDBnRMZ.js";const p="/assets/pdd.BRKmmrYk.gif",h="/assets/pdd-tabs.DrPbqsa4.gif",l="/assets/pdd-list.DDF6L7WR.gif",k="/assets/bottom-status.BZM2v8QI.png",b=JSON.parse('{"title":"仿百亿补贴，H5 Tabs 和 List 的缓存方案如何设计","description":"","frontmatter":{},"headers":[],"relativePath":"doc/tmp/_2024-03-23-ten-billion-subsidy-cache-tab-data/index.md","filePath":"doc/tmp/_2024-03-23-ten-billion-subsidy-cache-tab-data/index.md"}'),e={name:"doc/tmp/_2024-03-23-ten-billion-subsidy-cache-tab-data/index.md"};function E(d,s,r,g,c,o){return t(),a("div",null,s[0]||(s[0]=[n('<h1 id="仿百亿补贴-h5-tabs-和-list-的缓存方案如何设计" tabindex="-1">仿百亿补贴，H5 Tabs 和 List 的缓存方案如何设计 <a class="header-anchor" href="#仿百亿补贴-h5-tabs-和-list-的缓存方案如何设计" aria-label="Permalink to &quot;仿百亿补贴，H5 Tabs 和 List 的缓存方案如何设计&quot;">​</a></h1><p>逛过百亿补贴的朋友，应该都看过下图的效果。向右滑动时，H5 会切换到新 Tab，加载新 Tab 对应的 List 数据，并把这部分数据缓存下来。</p><p>当向左滑动时，可以看到旧 Tab 对应的 List。</p><p><img src="'+p+'" alt=""></p><p>这种缓存方案如何设计呢？我实现设计了一番，发现情况的确比较复杂，便总结了这篇文章。</p><p>接下来我会一步步分析百亿补贴对应的功能，并给出这些功能所需要缓存的数据。</p><p>我是羊肚JUN，一位前端程序员，做有温度的轻知识，有深度的硬内容。</p><h2 id="tabs-如何缓存" tabindex="-1">Tabs 如何缓存 <a class="header-anchor" href="#tabs-如何缓存" aria-label="Permalink to &quot;Tabs 如何缓存&quot;">​</a></h2><p>我们首先看下 Tabs 的功能。</p><p><img src="'+h+`" alt=""></p><p>拼多多的 Tabs 分一级 Tab 和二级 Tab，二级 Tab 还可以展开和收缩。并且切换一级 Tab 时，之前选中的二级 Tab 还能被保留。因此，我们需要记录的一个是二级 Tab 的数据，一个是选中的二级 Tab 下标，还有一个是二级 Tab 是否展开。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tabs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subTabs: [{ id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subIndex: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subExpanded: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span></code></pre></div><h2 id="list-如何缓存" tabindex="-1">List 如何缓存 <a class="header-anchor" href="#list-如何缓存" aria-label="Permalink to &quot;List 如何缓存&quot;">​</a></h2><h3 id="第一页的状态" tabindex="-1">第一页的状态 <a class="header-anchor" href="#第一页的状态" aria-label="Permalink to &quot;第一页的状态&quot;">​</a></h3><p>我们再来看下列表的状态。</p><p><img src="`+l+`" alt=""></p><p>可以看到，第一页列表出于加载中时，会展示骨架屏；加载完成后，会直接展示数据。此外，我们还需要考虑到接口失败的情况。于是我们需要一个标记，来展示列表的状态。这个标记可以记为 status。</p><p>status 有三种状态，分别是 loading（加载中）、finish（加载完毕）、error（加载失败）。我们把 status 再添加到需要缓存的字段中：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tabs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subTabs: [{ id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subIndex: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subExpanded: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  list: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loading&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span></code></pre></div><h3 id="加载更多的状态" tabindex="-1">加载更多的状态 <a class="header-anchor" href="#加载更多的状态" aria-label="Permalink to &quot;加载更多的状态&quot;">​</a></h3><p><img src="`+k+`" alt=""></p><p>再看列表底部的状态，目前能看到的状态是一个加载完成的状态，还有一个加载中的状态。</p><p>不过加载更多的状态，不适合完全套用之前列表 status 的三种状态。</p><p>当列表第一页时，底部状态应该是不展示的。我把底部状态设计为四种，分别是：</p><p>init（初始状态）、loading（加载中）、no_more（没有更多了）和 error（加载失败）。因此我们的缓存状态，需要再添加一个 bottomStatus 状态。</p><p>接下俩我们需要考虑，当加载下一页时，我们需要知道已经加载了多少页，所以我们还需要记录 pageIndex 这个状态。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> tabs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subTabs: [{ id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subIndex: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  subExpanded: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  list: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  status: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;loading&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pageIndex: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  bottomStatus: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;init&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}]</span></span></code></pre></div>`,27)]))}const F=i(e,[["render",E]]);export{b as __pageData,F as default};
