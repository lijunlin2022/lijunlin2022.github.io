import{_ as i,c as a,ae as n,o as t}from"./chunks/framework.BzDBnRMZ.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/bit-life/snake/gotoxy-util.md","filePath":"docs/bit-life/snake/gotoxy-util.md"}'),l={name:"docs/bit-life/snake/gotoxy-util.md"};function e(p,s,o,h,k,d){return t(),a("div",null,s[0]||(s[0]=[n(`<p>本节介绍了在贪吃蛇游戏中，如何画出墙壁和食物，以及为了在特定位置画出蛇，必须使用一个函数 SetConsoleCursorPosition，并封装了一个函数 gotoxyUtil</p><h2 id="画墙壁和食物" tabindex="-1">画墙壁和食物 <a class="header-anchor" href="#画墙壁和食物" aria-label="Permalink to &quot;画墙壁和食物&quot;">​</a></h2><p>在第 4 章时我们设置地图时同时设置了墙壁，在 <code>globalMapArr[25][25]</code> 中，是墙壁的地方均被设置为 <code>0bh</code></p><p>在第 5 章时我们设置了食物，<code>globalMapArr[globalFoodX][globalFoodY]</code> 被设置为 <code>0ch</code></p><p>画出地图和食物整体还是比较简单的，就是使用双重循环遍历二维数组</p><ul><li>如果遇到了 <code>0bh</code>，就打印 <code>#</code> 当作墙壁</li><li>如果遇到了 <code>0ch</code>，就打印 <code>*</code> 当作食物</li><li>剩余情况，就打印空白</li></ul><h2 id="setconsolecursorposition-——-画蛇" tabindex="-1">SetConsoleCursorPosition —— 画蛇 <a class="header-anchor" href="#setconsolecursorposition-——-画蛇" aria-label="Permalink to &quot;SetConsoleCursorPosition —— 画蛇&quot;">​</a></h2><p>和画墙壁和食物不同，我们需要根据坐标 <code>(x, y)</code> 来在特定位置打印 <code>O</code> 来充当蛇的身体</p><p>为了在特定位置画出蛇，需要使用 Windows 提供的函数，<code>SetConsoleCursorPosition()</code></p><blockquote><ul><li>语法</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BOOL WINAPI </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetConsoleCursorPosition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  _In_ HANDLE </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">hConsoleOutput</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  _In_ COORD  dwCursorPosition</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>参数 <ul><li><code>hConsoleOutput</code> 控制台屏幕缓冲区的句柄</li><li><code>dwCursorPosition</code> 指定新游标位置的 <code>oozie.coord.application.path</code> 结构</li></ul></li></ul><p>—— <a href="https://docs.microsoft.com/zh-cn/windows/console/setconsolecursorposition" target="_blank" rel="noreferrer">SetConsoleCursorPosition 函数 - Windows Console | Microsoft Docs</a></p></blockquote><p>至于 <code>dwCursorPosition</code> ，它的结构如下：</p><blockquote><ul><li>语法</li></ul><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _COORD {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SHORT X;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SHORT Y;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} COORD, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PCOORD;</span></span></code></pre></div><p>—— <a href="https://docs.microsoft.com/zh-cn/windows/console/coord-str" target="_blank" rel="noreferrer">COORD 结构 - Windows Console | Microsoft Docs</a></p></blockquote><h2 id="封装在特定位置打印的函数" tabindex="-1">封装在特定位置打印的函数 <a class="header-anchor" href="#封装在特定位置打印的函数" aria-label="Permalink to &quot;封装在特定位置打印的函数&quot;">​</a></h2><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gotoxyUtil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> pos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	__asm {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		mov eax, dword ptr ds : [pos]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		push eax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		call GetStdHandle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		push eax</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		call SetConsoleCursorPosition</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中，-11 代表句柄</p><h2 id="值得注意的情况" tabindex="-1">值得注意的情况 <a class="header-anchor" href="#值得注意的情况" aria-label="Permalink to &quot;值得注意的情况&quot;">​</a></h2><p>可以看到 <code>SetConsoleCursorPosition()</code> 中的 <code>COORD</code> 结构中，内部参数 x 和 y 都是 short，也就是 16 字节，而我们在 32 位汇编下，一般都使用的是 32 字节的变量，为了能调用整个函数，我们需要对变量进行一些处理：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> drawSnake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> format </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;O&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 得到蛇的坐标, 拼接后调用 gotoxy</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mov ecx, dword ptr ds : [eax]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 左移 16 位, 用以将 x 和 y 两个 dword 的值拼接为 1 个 word</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shl ecx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">													</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mov edx, dword ptr ds : [eax </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    or ecx, edx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    push ecx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call gotoxyUtil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    add esp, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,18)]))}const E=i(l,[["render",e]]);export{c as __pageData,E as default};
