import{_ as i,c as a,ae as t,o as e}from"./chunks/framework.BzDBnRMZ.js";const n="/assets/mdbook1.CCLUEkL5.png",l="/assets/mdbook2.DAnrhj9F.png",p="/assets/mdbook3.CP4XNS1K.png",h="/assets/mdbook4.CrSpR5qz.png",u=JSON.parse('{"title":"mdbook","description":"","frontmatter":{},"headers":[],"relativePath":"docs/mdbook/index.md","filePath":"docs/mdbook/index.md"}'),k={name:"docs/mdbook/index.md"};function o(r,s,d,g,c,m){return e(),a("div",null,s[0]||(s[0]=[t('<h1 id="mdbook" tabindex="-1">mdbook <a class="header-anchor" href="#mdbook" aria-label="Permalink to &quot;mdbook&quot;">​</a></h1><h2 id="github-pages" tabindex="-1">GitHub Pages <a class="header-anchor" href="#github-pages" aria-label="Permalink to &quot;GitHub Pages&quot;">​</a></h2><p>通过使用 GitHub Actions 的 workflow（工作流）的模板，我们可以快速部署网站到 github.io 域名下。</p><ol><li>GitHub 仓库中，选择 Settings -&gt; Pages -&gt; GitHub Actions -&gt; browse all workflows</li></ol><p><img src="'+n+'" alt=""></p><ol start="2"><li>点击 Pages 右侧的 View all 按钮</li></ol><p><img src="'+l+'" alt=""></p><ol start="3"><li>选择 mdBook，点击 Configure 按钮</li></ol><p><img src="'+p+'" alt=""></p><ol start="4"><li>之后 GitHub 会自动创建一个 yml 文件</li></ol><p><img src="'+h+`" alt=""></p><ol start="5"><li>我们可以将整个仓库克隆到本地，按照 <a href="https://rust-lang.github.io/mdBook/" target="_blank" rel="noreferrer">mdBook 官方指南</a> 的指导书写 Markdown 文件。当我们提交后，会自动触发 GitHub Actions 将网站部署到 GitHub Pages 下。</li></ol><h2 id="github-issues" tabindex="-1">GitHub Issues <a class="header-anchor" href="#github-issues" aria-label="Permalink to &quot;GitHub Issues&quot;">​</a></h2><p>mdBook 本身并不支持评论，但我们可以使用 <a href="https://utteranc.es/" target="_blank" rel="noreferrer">utterances</a> 这个评论插件，很方便快捷地添加评论功能。</p><ol><li>在 GitHub 新建一个用于评论的仓库。比如我单独新建了一个 <a href="https://github.com/lijunlin2022/blog-issues" target="_blank" rel="noreferrer">blog-issues</a></li><li>访问 <a href="https://github.com/apps/utterances" target="_blank" rel="noreferrer">utterances 的配置界面</a> ，点击 <code>Configure</code>，然后选择用于评论的仓库。</li><li>在 mdBook 的 Markdown 文件底部，加入一段 script 代码。我们只需要填写 <code>repo</code>（仓库名）和 <code>issue-term</code>（issue 分组，可以直接写文章名）。</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://utteranc.es/client.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  repo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lijunlin2022/blog-issues&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  issue-term</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mdbook-github-issues&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  theme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;github-light&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  crossorigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;anonymous&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  async</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="中文搜索" tabindex="-1">中文搜索 <a class="header-anchor" href="#中文搜索" aria-label="Permalink to &quot;中文搜索&quot;">​</a></h2><p>mdBook 生成的文档和书记，默认只支持英文搜索，其实我们只需要几个简单的配置，就可以让 mdBook 生成的 HTML 支持中文搜索。</p><ol><li>新建一个和 src 同级的文件夹 assets。</li><li>将 <a href="https://gist.github.com/lijunlin2022/1a9d90b078422192b51392c92e3a9dba" target="_blank" rel="noreferrer">fzf.umd.js</a> 和 <a href="https://gist.github.com/lijunlin2022/1a9d90b078422192b51392c92e3a9dba" target="_blank" rel="noreferrer">elasticlunr.js</a> 文件放到 assets 目录下。</li><li>在 book.toml 的配置中添加配置</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[output.html]</span></span>
<span class="line"><span>additional-js = [&quot;assets/fzf.umd.js&quot;, &quot;assets/elasticlunr.js&quot;]</span></span></code></pre></div><h2 id="mermaid" tabindex="-1">mermaid <a class="header-anchor" href="#mermaid" aria-label="Permalink to &quot;mermaid&quot;">​</a></h2><p>mdbook 默认并不支持使用 mermaid 画图。我们可以通过安装插件的方式，让 mdbook 支持这个功能。</p><p>（1）安装 mdbook-mermaid</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cargo install mdbook-mermaid</span></span></code></pre></div><p>（2）在 book.toml 中可以添加如下配置。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preprocessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mermaid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">command = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mdbook-mermaid&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">additional-js = [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;assets/mermaid.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;assets/mermaid-init.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><a href="https://github.com/badboy/mdbook-mermaid" target="_blank" rel="noreferrer">mdbook-mermaid</a> 是一个开源插件。</p><p>（3）拷贝 mermaid 到与 src 同级的 assets 文件夹中。</p><p>mermaid-init.js 用来初始化 mermaid，内容为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mermaid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ startOnLoad: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span></code></pre></div><p>至于 mermaid.min.js，可以去 <a href="https://mermaid.js.org/" target="_blank" rel="noreferrer">mermaid 官网</a>，找到它的 <a href="https://cdn.jsdelivr.net/npm/mermaid@10.2.0/dist/mermaid.min.js" target="_blank" rel="noreferrer">CDN 地址</a> 拷贝。</p><p>之后重新运行 <code>mdbook serve</code> 命令，就可以看到 mdbook 已经支持 mermaid 画图功能了。</p><p>(4) 更新部署脚本</p><p>如果你和我一样，使用的是 GitHub Pages 部署博客，那么你需要更改 yml。</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # Build job</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      MDBOOK_VERSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.4.21</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Install mdBook</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          curl --proto &#39;=https&#39; --tlsv1.2 https://sh.rustup.rs -sSf -y | sh</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          rustup update</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          cargo install --version \${MDBOOK_VERSION} mdbook</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          cargo install mdbook-mermaid</span></span></code></pre></div><h2 id="_404" tabindex="-1">404 <a class="header-anchor" href="#_404" aria-label="Permalink to &quot;404&quot;">​</a></h2><p>我们可以给网站设置 404 页面，这样当用户访问到网站不存在的链接时，会跳转到 404 页面，提高用户的体验。</p><p>默认情况下，mdBook 只需要在 src 目录下添加 404.md，404 页面便会显示 404.md 的内容。</p><p>我们也可以通过修改 book.toml 中的配置，改变 404 页面的路径：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input-404 = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;404.md&quot;</span></span></code></pre></div><p>除此之外，我们还需要设置 site-url，site-url 一般设置为网站的根路径，确保 404 页面也能正常获取脚本和样式文件。</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">site-url = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://lijunlin2022.github.io/blog/&quot;</span></span></code></pre></div><h2 id="sitemap" tabindex="-1">sitemap <a class="header-anchor" href="#sitemap" aria-label="Permalink to &quot;sitemap&quot;">​</a></h2><p>如果我们能够给搜索引擎提供 <a href="https://developers.google.com/search/docs/crawling-indexing/sitemaps/build-sitemap?hl=zh-cn" target="_blank" rel="noreferrer">sitemap.xml</a>，那么它抓取 mdbook 生成的网站就会更加快速。</p><p>目前 mdbook 没有提供生成 sitemap.xml 的插件，但是我们可以使用 node.js 的插件。</p><p>这里我选中了一款插件，名叫 <a href="https://github.com/zerodevx/static-sitemap-cli" target="_blank" rel="noreferrer">static-sitemap-cli</a>。</p><p>我们只需要简单的两个步骤，就可以生成自己的 sitemap.xml。</p><p>（1）安装 static-sitemap-cli</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm install static-sitemap-cli</span></span></code></pre></div><p>（2）生成站点地图到 book 文件夹下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npx sscli --base https://lijunlin2022.github.io/blog/ -r book</span></span></code></pre></div><p>这样便完成了。</p><p>不过，我的最终目的是，每当我有新博客提交时，都会自动更新 sitemap.xml 并部署，因此我需要改造一下原有的 yml 文件。</p><p>具体可以参考 <a href="https://github.com/lijunlin2022/blog/blob/main/.github/workflows/mdbook.yml" target="_blank" rel="noreferrer">https://github.com/lijunlin2022/blog/blob/main/.github/workflows/mdbook.yml</a>。</p><p>以我的博客为例，访问 <a href="https://lijunlin2022.github.io/blog/sitemap.xml" target="_blank" rel="noreferrer">https://lijunlin2022.github.io/blog/sitemap.xml</a> 便可以看到 sitemap.xml 文件了。</p>`,55)]))}const b=i(k,[["render",o]]);export{u as __pageData,b as default};
