import{_ as s,c as e,ae as n,o as t}from"./chunks/framework.BzDBnRMZ.js";const r=JSON.parse('{"title":"正则表达式的基本符号","description":"","frontmatter":{},"headers":[],"relativePath":"docs/python/04-basic-symbols-of-regular-expressions.md","filePath":"docs/python/04-basic-symbols-of-regular-expressions.md"}'),p={name:"docs/python/04-basic-symbols-of-regular-expressions.md"};function i(o,a,l,c,d,u){return t(),e("div",null,a[0]||(a[0]=[n(`<h1 id="正则表达式的基本符号" tabindex="-1">正则表达式的基本符号 <a class="header-anchor" href="#正则表达式的基本符号" aria-label="Permalink to &quot;正则表达式的基本符号&quot;">​</a></h1><p>在爬虫的开发中，需要把有用的信息从一大段文本中提取出来。正则表达式是提取信息的方法之一。正则表达式虽然不是最简单的也不是最高效的数据提取方法，但它是最直接的。而且在某些情况下，只有使用正则表达式才能达到目的。学好正则表达式，是开发爬虫的第一步。</p><p>正则表达式（Regular Expression）是一段字符串，它可以表示一段有规律的信息。</p><h2 id="点号" tabindex="-1">点号 &quot;.&quot; <a class="header-anchor" href="#点号" aria-label="Permalink to &quot;点号 &quot;.&quot;&quot;">​</a></h2><p>一个点号可以代替除了换行符以外的任何一个字符，包括但不限于英文字母、数字、汉字、英文标点符号和中文标点符号。例如，有如下几个不同的字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kingname</span></span>
<span class="line"><span>kinabcme</span></span>
<span class="line"><span>kin123me</span></span>
<span class="line"><span>kin我是谁me</span></span>
<span class="line"><span>kin嗨你好me</span></span>
<span class="line"><span>kin&quot;m&quot;me</span></span></code></pre></div><p>这些字符串的前3个字符都是 kin，后两个字符都是 me，只有中间的3个字符不同。如果使用点号来表示，那么全部都可以变成 kin...me 的形式，中间有多少个字就用多少个点。</p><h2 id="星号" tabindex="-1">星号 &quot;*&quot; <a class="header-anchor" href="#星号" aria-label="Permalink to &quot;星号 &quot;*&quot;&quot;">​</a></h2><p>一个星号可以表示它前面的一个子表达式（普通字符、另一个或几个正则表达式符号）0 次到无限次。</p><p>例如，有如下几个不同的字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>如果快乐你就笑哈</span></span>
<span class="line"><span>如果快乐你就笑哈哈</span></span>
<span class="line"><span>如果快乐你就笑哈哈哈哈</span></span>
<span class="line"><span>如果快乐你就笑哈哈哈哈哈哈哈哈哈</span></span></code></pre></div><p>这些字符串里面，&quot;哈&quot;字重复出现，所以如果用星号来表示，那么就可以全部变成：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>如果快乐你就笑哈*</span></span></code></pre></div><p>由于星号可以表示它前面的字符 0 次，没有&quot;哈&quot;字，这个正则表达式也是匹配给出的几个不同的字符串的。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>如果快乐你就笑*</span></span></code></pre></div><p>既然星号可以表示它前面的字符，那么如果它前面的字符是一个点号呢？例如下面这个正则表达式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>如.*哈</span></span></code></pre></div><p>它表示在&quot;如&quot;和&quot;哈&quot;中间出现&quot;任意多个除了换行符以外的任意字符&quot;。这句话看起来有点绕，用下面几个字符串来说明，它们全部都可以用上面的这个正则表达式来表示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>如哈</span></span>
<span class="line"><span>如果快乐哈</span></span>
<span class="line"><span>如果快乐你就笑哈</span></span>
<span class="line"><span>如果你知道1+1=2那么请计算地球的半径哈</span></span>
<span class="line"><span>如aklsdjfjaf哈</span></span></code></pre></div><h2 id="问号" tabindex="-1">问号 &quot;?&quot; <a class="header-anchor" href="#问号" aria-label="Permalink to &quot;问号 &quot;?&quot;&quot;">​</a></h2><p>问号表示它前面的子表达式 0 次或者 1 次。注意，这里的问号是英文问号。例如下面这两个不同的字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>笑起来。</span></span>
<span class="line"><span>笑起来哈。</span></span></code></pre></div><p>在汉字&quot;来&quot;和中文句号之间有 0 个或者 1 个&quot;哈&quot;字，都可以使用下面这个正则表达式来表示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>如.*?哈</span></span></code></pre></div><p>问号最大的用处是与点号和星号配合起来使用，构成&quot;.*?&quot;。通过正则表达式来提取信息的时候，用到最多的也是这个组合。下面的所有字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>如哈</span></span>
<span class="line"><span>如果快乐哈</span></span>
<span class="line"><span>如果快乐你就笑哈</span></span>
<span class="line"><span>如果你知道1+1=2那么请计算地球的半径哈</span></span>
<span class="line"><span>如aklsdjfjaf哈</span></span></code></pre></div><p>都可以用下面这个正则表达式来表示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>如.*?哈</span></span></code></pre></div><h2 id="反斜杠" tabindex="-1">反斜杠 &quot;&quot; <a class="header-anchor" href="#反斜杠" aria-label="Permalink to &quot;反斜杠 &quot;\\&quot;&quot;">​</a></h2><p>在正则表达式里面，很多符号都是有特殊意义的，例如问号、星号、大括号、中括号和小括号。那么如果要匹配的内容里面本身就有这些符号怎么办呢？如何告诉正则表达式现在只想把星号当作普通的星号来使用呢？</p><p>这个时候反斜杠就要登场了。反斜杠放在星号的前面，写成 &quot;*&quot; 可以把星号变成普通的字符，不再具有正则表达式的意义。</p><h2 id="数字-d" tabindex="-1">数字 &quot;\\d&quot; <a class="header-anchor" href="#数字-d" aria-label="Permalink to &quot;数字 &quot;\\d&quot;&quot;">​</a></h2><p>正则表达式里面使用 &quot;\\d&quot; 来表示一位数字。为什么要用字母 d 呢？因为 d 是英文 &quot;digital（数字）&quot; 的首字母。再次强调一下，&quot;\\d&quot; 虽然是由反斜杠和字母 d 构成的，但是要把 &quot;\\d&quot; 看成一个正则表达式符号整体。如果要提取 2 个数字，可以使用 \\d\\d；如果要提取 3 个数字，可以使用 \\d\\d\\d。但是如果不知道这个数有多少位怎么办呢？就需要用 * 号来表示一个任意位数的数字。</p><h2 id="小括号" tabindex="-1">小括号 &quot;()&quot; <a class="header-anchor" href="#小括号" aria-label="Permalink to &quot;小括号 &quot;()&quot;&quot;">​</a></h2><p>小括号可以把括号里面的内容提取出来。前面讲到的符号仅仅能让正则表达式&quot;表示&quot;一串字符串。但是如果要从一段字符串中&quot;提取&quot;出一部分的内容应该怎么办呢？这个时候就需要使用小括号了。有如下一个字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>我的密码是：12345abcde你帮我记住。</span></span></code></pre></div><p>可以看出，这里的密码左边有一个英文冒号，右边有一个汉字&quot;你&quot;。当构造一个正则表达式：<code>.*?你</code> 时，得到的结果将会是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>:12345abcde你</span></span></code></pre></div><p>然而，冒号和汉字&quot;你&quot;并不是密码的一部分，如果只想要 &quot;12345abcde&quot;，就需要使用括号：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>:(.*?)你</span></span></code></pre></div><p>得到的结果就是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>12345abcde</span></span></code></pre></div><h2 id="和-的区别" tabindex="-1">&quot;.*?&quot; 和 &quot;.?&quot; 的区别 <a class="header-anchor" href="#和-的区别" aria-label="Permalink to &quot;&quot;.*?&quot; 和 &quot;.?&quot; 的区别&quot;">​</a></h2><p>下面通过一个实际的例子来进行说明。请看下面这一段话：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>我的微博密码是: 1234567, QQ 密码是: 33445566, 银行卡密码是: 888888, GitHub 密码是: 999abc999, 帮我记住它们</span></span></code></pre></div><p>这段话有一个显著的规律，是在&quot;密码是&quot;这 3 个汉字的后面跟一个中文的冒号，冒号后面是密码，密码后面是中文的逗号。</p><ul><li><code>密码是(.*),</code>，能够提取到的信息是 <code>1234567, QQ 密码是: 33445566, 银行卡密码是: 888888, GitHub 密码是: 999abc999</code></li><li><code>密码是(.*?),</code>，能够提取到的信息是 <code>1234567</code>，<code>33445566</code>，<code>888888</code>，<code>999abc999</code></li></ul><p>举一个例子，10 个人肩并肩并排站着，使用 <code>(.*)</code> 取到了第 1 个人左手到第 10 个人右手之间的所有东西，而使用 <code>(.*?)</code> 取到的是每个人的左手和右手之间的东西。</p><p>一句话总结如下:</p><ul><li><code>.*</code>：贪婪模式，获取最长的满足条件的字符串。</li><li><code>.*?</code>：非贪婪模式，获取最短的能满足条件的字符串。</li></ul>`,50)]))}const b=s(p,[["render",i]]);export{r as __pageData,b as default};
