import{_ as t,c as i,ae as a,o as n}from"./chunks/framework.BzDBnRMZ.js";const c=JSON.parse('{"title":"整型","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rust/02-Rust 的第一步/01-integer.md","filePath":"docs/rust/02-Rust 的第一步/01-integer.md"}'),e={name:"docs/rust/02-Rust 的第一步/01-integer.md"};function h(d,s,r,l,p,k){return n(),i("div",null,s[0]||(s[0]=[a(`<h1 id="整型" tabindex="-1">整型 <a class="header-anchor" href="#整型" aria-label="Permalink to &quot;整型&quot;">​</a></h1><p>整数类型简称 <code>整型</code>，rust 中的整型分为有符号整型和无符号整型。</p><table tabindex="0"><thead><tr><th>位长度</th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8-bit</td><td>i8</td><td>u8</td></tr><tr><td>16-bit</td><td>i16</td><td>u16</td></tr><tr><td>32-bit</td><td>i32</td><td>u32</td></tr><tr><td>64-bit</td><td>i64</td><td>u64</td></tr><tr><td>128-bit</td><td>i128</td><td>u128</td></tr><tr><td>arch</td><td>isize</td><td>usize</td></tr></tbody></table><h2 id="整型互相转换" tabindex="-1">整型互相转换 <a class="header-anchor" href="#整型互相转换" aria-label="Permalink to &quot;整型互相转换&quot;">​</a></h2><p><code>as</code> 操作符可以将让整型互相转换。</p><h2 id="数字转字符串" tabindex="-1">数字转字符串 <a class="header-anchor" href="#数字转字符串" aria-label="Permalink to &quot;数字转字符串&quot;">​</a></h2><p>我们可以直接使用 <code>to_string()</code> 方法将数字转换为字符串。</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12345</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num_string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to_string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Number as string: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num_string);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8)]))}const g=t(e,[["render",h]]);export{c as __pageData,g as default};
