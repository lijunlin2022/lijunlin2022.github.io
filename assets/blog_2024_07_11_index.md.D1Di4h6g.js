import{_ as i,c as a,ae as n,o as h}from"./chunks/framework.BzDBnRMZ.js";const l="/assets/pdd.DJr_zF-n.jpg",t="/assets/contain-and-cover.C4TcjOso.png",e="/assets/product.DRDoATJk.png",k="/assets/canvas-contain.4r_B5XwN.png",p="/assets/canvas-contain-imgRatio-le-canvasRatio.Clvt2jGo.png",d="/assets/canvas-contain-imgRatio-ge-canvasRatio.DqusxxrG.png",r="/assets/canvas-cover.HvvQ4qum.png",E="/assets/canvas-cover-imgRatio-ge-canvasRatio.BfyU-tBE.png",g="/assets/canvas-cover-imgRatio-le-canvasRatio.BvkbXiob.png",v=JSON.parse('{"title":"从拼多多分享商品说起，canvas 绘图如何实现 contain 和 cover 效果？","description":"","frontmatter":{},"headers":[],"relativePath":"blog/2024/07/11/index.md","filePath":"blog/2024/07/11/index.md"}'),o={name:"blog/2024/07/11/index.md"};function c(y,s,F,m,w,A){return h(),a("div",null,s[0]||(s[0]=[n('<h1 id="从拼多多分享商品说起-canvas-绘图如何实现-contain-和-cover-效果" tabindex="-1">从拼多多分享商品说起，canvas 绘图如何实现 contain 和 cover 效果？ <a class="header-anchor" href="#从拼多多分享商品说起-canvas-绘图如何实现-contain-和-cover-效果" aria-label="Permalink to &quot;从拼多多分享商品说起，canvas 绘图如何实现 contain 和 cover 效果？&quot;">​</a></h1><p>我们偶尔会在一些 H5、小程序中，看到分享商品的功能。比如拼多多小程序中，用户可以把商品分享给自己的好友。分享图主要由 2 张图片组成，一张商品图，一张背景图。</p><p><img src="'+l+'" alt=""></p><p>商品图通常由商家自己配置，尺寸会变动，一般是 contain 效果；背景图通常由 UI 提供，尺寸固定，一般是 cover 效果。</p><p><img src="'+t+'" alt=""></p><p>如果使用 css，我们可以给 <code>background-size</code> 设置 <code>contain</code> 和 <code>cover</code>，可惜这类分享图基本由 canvas 绘制而成。canvas 只提供了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="noreferrer">drawImage()</a> 绘制图片，无法精准实现 <code>contain</code> 和 <code>cover</code> 效果，于是我实现了 <code>drawContainImage</code> 和 <code>drawCoverImage</code> 两个工具函数。</p><p>本文我会先分析 contain 效果的<code>图片宽高比</code>和<code>容器宽高比</code>，并给出 drawContainImage 工具函数；再分析 cover 效果的<code>图片宽高比</code>和<code>容器宽高比</code>，并给出 drawCoverImage 工具函数；最后我会用两个工具函数，绘制如下分享图：</p><p><img src="'+e+'" alt=""></p><p>拳打 H5，脚踢小程序。我是「小霖家的混江龙」，关注我，带你了解更多实用的 H5、小程序武学。</p><h2 id="contain-效果" tabindex="-1">contain 效果 <a class="header-anchor" href="#contain-效果" aria-label="Permalink to &quot;contain 效果&quot;">​</a></h2><p>先来看 contain 效果。contain 效果是「缩放图片以<strong>完全装入</strong>容器」，它会有两种情况：</p><ul><li>图片宽高比 &lt; 容器宽高比，缩放后图片宽度 &lt; 容器宽度，图片高度 = 容器高度。</li><li>图片宽高比 &gt; 容器宽高比，缩放后图片宽度 = 容器宽度，图片高度 &lt; 容器高度。</li></ul><p><img src="'+k+'" alt=""></p><p>不难看出，contain 效果下，图片总是完整展示的，因此我们不必考虑裁剪图片。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="noreferrer">drawImage</a> 的 9 个参数中，我们只需要考虑 5 个参数：</p><blockquote><ul><li><code>image</code>，画布图像源。</li><li><code>dx</code>，image 的左上角在目标画布上 X 轴坐标。</li><li><code>dy</code>，image 的左上角在目标画布上 Y 轴坐标。</li><li><code>dw</code>，image 在目标画布上绘制的宽度。</li><li><code>dh</code>，image 在目标画布上绘制的高度。</li></ul></blockquote><h3 id="图片宽高比-容器宽高比" tabindex="-1">图片宽高比 &lt; 容器宽高比 <a class="header-anchor" href="#图片宽高比-容器宽高比" aria-label="Permalink to &quot;图片宽高比 &lt; 容器宽高比&quot;">​</a></h3><p>图片宽高比 &lt; 容器宽高比时，dy，dw 和 dh 可以直观看出来，而 dx 还需要单独计算。如下图所示：</p><p><img src="'+p+'" alt=""></p><ul><li>dx 是 image 的左上角在目标画布上 X 轴坐标，<code>dx = (width - dw) / 2</code>；</li><li>dy 是 image 的左上角在目标画布上 Y 轴坐标，<code>dy = 0</code>；</li><li>dw 是 image 在目标画布上绘制的宽度，<code>dw = imgRatio * width</code>；</li><li>dh 是 image 在目标画布上绘制的高度，<code>dh = height</code>。</li></ul><h3 id="图片宽高比-容器宽高比-1" tabindex="-1">图片宽高比 &gt; 容器宽高比 <a class="header-anchor" href="#图片宽高比-容器宽高比-1" aria-label="Permalink to &quot;图片宽高比 &gt; 容器宽高比&quot;">​</a></h3><p>图片宽高比 &gt; 容器宽高比时，dx，dw 和 dh 可以直观看出来，而 dy 还需要单独计算。如下图所示：</p><p><img src="'+d+`" alt=""></p><ul><li>dx 是 image 的左上角在目标画布上 X 轴坐标，<code>dx = 0</code>；</li><li>dy 是 image 的左上角在目标画布上 Y 轴坐标，<code>dy = (height - dh) / 2</code>；</li><li>dw 是 image 在目标画布上绘制的宽度，<code>dw = width</code>；</li><li>dh 是 image 在目标画布上绘制的高度，<code>dh = dw / imgRatio</code>。</li></ul><h3 id="drawcontainimage-代码" tabindex="-1">drawContainImage 代码 <a class="header-anchor" href="#drawcontainimage-代码" aria-label="Permalink to &quot;drawContainImage 代码&quot;">​</a></h3><p>下面是 drawContainImage 的代码，因为 contain 效果一般会留有空白，所以我增加了一个 fillStyle 参数，用来设置空白部分的颜色。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> drawContainImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">fillStyle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (fillStyle) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.fillStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fillStyle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, width, height)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boxRatio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> imgRatio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.height</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (imgRatio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boxRatio) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgRatio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dw) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imgRatio</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dh) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img, x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dx, y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dy, dw, dh)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="cover-效果" tabindex="-1">cover 效果 <a class="header-anchor" href="#cover-效果" aria-label="Permalink to &quot;cover 效果&quot;">​</a></h2><p>再看 cover 效果，cover 效果是「缩放图片以<strong>完全覆盖</strong>容器」。如下示意图所示，缩放后图片（红色部分）比容器（绿色部分）大。它会有两种情况：</p><ul><li>图片宽高比 &gt; 容器宽高比，缩放后图片宽度 = 容器宽度，图片高度 &gt; 容器高度。</li><li>图片宽高比 &lt; 容器宽高比，缩放后图片宽度 &lt; 容器宽度，图片高度 = 容器高度。</li></ul><p><img src="`+r+'" alt=""></p><p>不难看出，contain 效果下，图片总是需要裁剪图片，所以 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/drawImage" target="_blank" rel="noreferrer">drawImage</a> 的 9 个参数我们都需要使用：</p><blockquote><ul><li><code>image</code>，画布图像源。</li><li><code>sx</code>，image 的矩形（裁剪）选择框的左上角 X 轴坐标。</li><li><code>sy</code>，image 的矩形（裁剪）选择框的左上角 Y 轴坐标。</li><li><code>sw</code>，image 的矩形（裁剪）选择框的宽度。</li><li><code>sh</code>，image的矩形（裁剪）选择框的高度。</li><li><code>dx</code>，image 的左上角在目标画布上 X 轴坐标。</li><li><code>dy</code>，image 的左上角在目标画布上 Y 轴坐标。</li><li><code>dw</code>，image 在目标画布上绘制的宽度。</li><li><code>dh</code>，image 在目标画布上绘制的高度。</li></ul></blockquote><p>幸运的是，contain 效果下，dx, dy, dw 和 dh 的取值都是固定的，所以我们需要着重考虑的只有 sx, sy, sw 和 sh 这 4 个参数。</p><h3 id="图片宽高比-容器宽高比-2" tabindex="-1">图片宽高比 &gt; 容器宽高比 <a class="header-anchor" href="#图片宽高比-容器宽高比-2" aria-label="Permalink to &quot;图片宽高比 &gt; 容器宽高比&quot;">​</a></h3><p>图片宽高比 &gt; 容器宽高比时，sy，sw 和 sh 可以直观看出来，而 sx 还需要单独计算。如下图所示：</p><p><img src="'+E+'" alt=""></p><ul><li>sx 是 image 裁剪选择框（绿色部分）的左上角 X 轴坐标，<code>sx = (img.width - sw) / 2</code>；</li><li>sy 是 image 裁剪选择框（绿色部分）的左上角 Y 轴坐标，<code>sy = 0</code>；</li><li>sw 是 image 裁剪选择框（绿色部分）的宽度，<code>sw = sh * boxRatio</code>；</li><li>sh 是 image 裁剪选择框（绿色部分）的高度，<code>sh = img.height</code>。</li></ul><h3 id="图片宽高比-容器宽高比-3" tabindex="-1">图片宽高比 &lt; 容器宽高比 <a class="header-anchor" href="#图片宽高比-容器宽高比-3" aria-label="Permalink to &quot;图片宽高比 &lt; 容器宽高比&quot;">​</a></h3><p>图片宽高比 &lt; 容器宽高比时，sx, sw 和 sh 可以直观看出来，而 sy 还需要单独计算。如下图所示：</p><p><img src="'+g+`" alt=""></p><ul><li>sx 是 image 裁剪选择框（绿色部分）的左上角 X 轴坐标，<code>sx = 0</code>；</li><li>sy 是 image 裁剪选择框（绿色部分）的左上角 Y 轴坐标，<code>sy = (img.height - sh) / 2</code>；</li><li>sw 是 image 裁剪选择框（绿色部分）的宽度，<code>sw = img.width</code>；</li><li>sh 是 image 裁剪选择框（绿色部分）的高度，<code>sh = sw / boxRatio</code>。</li></ul><h3 id="drawcoverimage-代码" tabindex="-1">drawCoverImage 代码 <a class="header-anchor" href="#drawcoverimage-代码" aria-label="Permalink to &quot;drawCoverImage 代码&quot;">​</a></h3><p>下面是 drawCoverImage 的代码，因为 cover 效果不会留空白，所以不需要 fillStyle 参数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> drawCoverImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boxRatio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> imgRatio</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.height</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (imgRatio </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boxRatio) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.width</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boxRatio</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (img.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sh) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img.height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sh </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boxRatio</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (img.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sw) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(img, sx, sy, sw, sh, x, y, width, height)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="完整代码" tabindex="-1">完整代码 <a class="header-anchor" href="#完整代码" aria-label="Permalink to &quot;完整代码&quot;">​</a></h2><p>完整代码可以在码上掘金上查看：<a href="https://code.juejin.cn/pen/7388885726391992371" target="_blank" rel="noreferrer">https://code.juejin.cn/pen/7388885726391992371</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文我分析了 contain 效果、cover 效果的<code>图片宽高比</code>和<code>容器宽高比</code>关系，并给出 drawContainImage 和 drawCoverImage 工具函数，最后用两个工具函数，绘制了一个商品分享图。</p><p>拳打 H5，脚踢小程序。我是「小霖家的混江龙」，关注我，带你了解更多实用的 H5、小程序武学。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://www.cnblogs.com/AIonTheRoad/p/14063041.html" target="_blank" rel="noreferrer">canvas drawImage 绘图实现 contain 和 cover 的效果</a></li><li><a href="https://developer.aliyun.com/article/916087" target="_blank" rel="noreferrer">在容器内显示图片的五种方案：contain、cover、fill、none、scale-down</a></li></ul>`,51)]))}const D=i(o,[["render",c]]);export{v as __pageData,D as default};
