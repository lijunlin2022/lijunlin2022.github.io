import{_ as a,c as i,ae as n,o as p}from"./chunks/framework.BzDBnRMZ.js";const d=JSON.parse('{"title":"异步分包","description":"","frontmatter":{},"headers":[],"relativePath":"docs/miniprogram/01-async-subpackage.md","filePath":"docs/miniprogram/01-async-subpackage.md"}'),t={name:"docs/miniprogram/01-async-subpackage.md"};function e(l,s,h,k,o,c){return p(),i("div",null,s[0]||(s[0]=[n(`<h1 id="异步分包" tabindex="-1">异步分包 <a class="header-anchor" href="#异步分包" aria-label="Permalink to &quot;异步分包&quot;">​</a></h1><p>截止 2022 年 3 月 3 日，小程序的体积限制如下：[^1]</p><blockquote><p>整个小程序所有分包大小不超过 20M 单个分包/主包大小不能超过 2M</p></blockquote><p>因此，作为小程序开发者，总有一天会面临小程序的体积问题。</p><p>开发者一般会将核心页面放在主包中，将非核心的页面放在分包中。但是随着业务的迭代，主包总会有超过 2M 的时候，这个时候就需要用到「分包异步化」了。</p><p>微信官方文档将「分包异步化」分为：「跨分包自定义组件引用」 和 「跨分包 JS 代码引用」 [^2]。根据我实际的开发经验，「跨分包自定义组件引用」更加常见实用，下面我将介绍简单介绍这种方法。</p><p>为了行文方便，我后文将使用了「跨分包自定义组件引用」这种方式的组件，称为「异步组件」。</p><h2 id="给「异步组件」单独建一个分包" tabindex="-1">给「异步组件」单独建一个分包 <a class="header-anchor" href="#给「异步组件」单独建一个分包" aria-label="Permalink to &quot;给「异步组件」单独建一个分包&quot;">​</a></h2><p>我创建了一个分包 <code>sub-async-components-package</code>，之后所有的异步组件，都存放到这个分包中。</p><ul><li>app.json</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;pages/index/index&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;subPackages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sub-async-components-package&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;pages/index&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>sub-async-components-package</code> 的目录结构如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src</span></span>
<span class="line"><span>├─pages</span></span>
<span class="line"><span>└─sub-async-components-package</span></span>
<span class="line"><span>  └─async-components</span></span>
<span class="line"><span>    └─component-a</span></span>
<span class="line"><span>    └─component-b</span></span>
<span class="line"><span>    └─component-c</span></span></code></pre></div><h2 id="在主包页面中引入异步组件" tabindex="-1">在主包页面中引入异步组件 <a class="header-anchor" href="#在主包页面中引入异步组件" aria-label="Permalink to &quot;在主包页面中引入异步组件&quot;">​</a></h2><p>完成第一步之后，我们可以在主包的页面中，以如下方式引入异步组件。异步组件的传参，和普通组件一致。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;usingComponents&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;async-component-a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/sub-async-components-package/async-components/component-a/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;async-component-b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/sub-async-components-package/async-components/component-b/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;async-component-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/sub-async-components-package/async-components/component-c/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;componentPlaceholder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;async-component-a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;view&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;async-component-b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;view&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;async-component-c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;view&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">async-component-a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">async-component-a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">async-component-b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">async-component-b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">async-component-c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">async-component-c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>现在我们简单一下上述配置的意思。<code>componentPlaceholder</code> 顾名思义就是组件占位符的意思。在分包还没有加载完成之前，页面会用 <code>view</code> 标签暂时替代 <code>async-component-x</code> 标签，等到分包加载完成之后，再将 <code>view</code> 标签占据的位置还给 <code>async-component-x</code>。</p><p>[^1]: <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html" target="_blank" rel="noreferrer">分包加载 | 微信开放文档</a> [^2]: <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages/async.html" target="_blank" rel="noreferrer">分包异步化 | 微信开放文档</a></p>`,19)]))}const r=a(t,[["render",e]]);export{d as __pageData,r as default};
