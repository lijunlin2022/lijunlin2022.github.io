import{_ as i,c as a,ae as n,o as p}from"./chunks/framework.BzDBnRMZ.js";const g=JSON.parse('{"title":"使用正则表达式","description":"","frontmatter":{},"headers":[],"relativePath":"docs/python/05-use-regular-expressions.md","filePath":"docs/python/05-use-regular-expressions.md"}'),l={name:"docs/python/05-use-regular-expressions.md"};function t(h,s,e,k,r,d){return p(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用正则表达式" tabindex="-1">使用正则表达式 <a class="header-anchor" href="#使用正则表达式" aria-label="Permalink to &quot;使用正则表达式&quot;">​</a></h1><p>Python 的正则表达式模块名字为 &quot;re&quot;，也就是 &quot;regular expression&quot; 的首字母缩写。在 Python 中需要首先导入这个模块再进行使用。导入的语句为：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span></code></pre></div><h2 id="findall" tabindex="-1">findall() <a class="header-anchor" href="#findall" aria-label="Permalink to &quot;findall()&quot;">​</a></h2><p>Python 的正则表达式模块包含一个 findall 方法，它能够以列表的形式返回所有满足要求的字符串。findall 的函数原型为：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.findall(pattern, string, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flags</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>pattern 表示正则表达式，string 表示原来的字符串，flags 表示一些特殊功能的标志。</p><p>findall 的结果是一个列表，包含了所有的匹配到的结果。如果没有匹配到结果，就会返回空列表。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;我的微博密码是: 1234567, QQ 密码是: 33445566, 银行卡密码是: 888888, GitHub 密码是: 999abc999, 帮我记住它们&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">passworld_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;密码是: (.*?),&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;姓名是: (.*?),&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(passworld_list)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name_list)</span></span></code></pre></div><p>当需要提取某些内容的时候，使用小括号将这些内容括起来，这样才不会得到不相干的信息。如果包含多个 &quot;(.*? )&quot; 怎么返回呢？返回的仍然是一个列表，但是列表里面的元素变为了元组。比如下面这个例子，元组里面的第 1 个元素是账号，第 2 个元素为密码。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;我的微博账号是: zhangsan, 密码是: 1234567, QQ 账号是: lisi, 密码是: 33445566, GitHub 账号是: wangwu, 密码是: 999abc999, 帮我记住它们&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">account_passworld_list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;账号是: (.*?), 密码是: (.*?), &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(account_passworld_list)</span></span></code></pre></div><p>函数原型中有一个 flags 参数。这个参数是可以省略的。当不省略的时候，具有一些辅助功能，例如忽略大小写、忽略换行符等。这里以忽略换行符为例来进行说明:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;&#39;我叫zhangsan, 我的密码是: 123</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">456,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;密码是: (.*?),&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, string, re.S)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password_no_flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;密码是: (.*?),&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, string)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;使用 re.S 时: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(password_flags)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 re.S 时: [&#39;123\\n456&#39;]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;不使用 re.S 时: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(password_no_flags)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 不使用 re.S 时: []</span></span></code></pre></div><p>在爬虫的开发过程中非常容易出现这样的情况，要匹配的内容存在换行符 &quot;\\n&quot;。要忽略换行符，就需要使用到 &quot;re.S&quot; 这个 flag。虽然说匹配到的结果中出现了 &quot;\\n&quot; 这个符号，不过总比什么都得不到强。内容里面的换行符在后期清洗数据的时候把它替换掉即可。</p><h2 id="search" tabindex="-1">search() <a class="header-anchor" href="#search" aria-label="Permalink to &quot;search()&quot;">​</a></h2><p>search() 的用法和 findall() 的用法一样，但是 search() 只会返回第 1 个满足要求的字符串。一旦找到符合要求的内容，它就会停止查找。对于从超级大的文本里面只找第 1 个数据特别有用，可以大大提高程序的运行效率。</p><p>search() 的函数原型为：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.search(pattern, string, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flags</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>对于结果，如果匹配成功，则是一个正则表达式的对象；如果没有匹配到任何数据，就是 None。如果需要得到匹配到的结果，则需要通过. group() 这个方法来获取里面的值。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;我的微博密码是: 1234567, QQ 密码是: 33445566, 银行卡密码是: 888888, GitHub 密码是: 999abc999, 帮我记住它们&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password_search </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.search(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;密码是: (.*?),&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">password_not_find </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.search(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xx 是: (.*?),&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password_search) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;re.Match object; span=(4, 17), match=&#39;密码是: 1234567,&#39;&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password_search.group()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 密码是: 1234567,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password_search.group(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1234567</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password_not_find) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># None</span></span></code></pre></div><p>只有在 .group() 里面的参数为1的时候，才会把正则表达式里面的括号中的结果打印出来。.group() 的参数最大不能超过正则表达式里面括号的个数。参数为 1 表示读取第1个括号中的内容，参数为 2 表示读取第 2 个括号中的内容，以此类推。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;我的微博账号是: zhangsan, 密码是: 1234567, QQ 账号是: lisi, 密码是: 33445566, GitHub 账号是: wangwu, 密码是: 999abc999, 帮我记住它们&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">account_passworld </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.search(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;账号是: (.*?), 密码是: (.*?), &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(account_passworld.group(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># zhangsan</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(account_passworld.group(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1234567</span></span></code></pre></div><h2 id="使用技巧" tabindex="-1">使用技巧 <a class="header-anchor" href="#使用技巧" aria-label="Permalink to &quot;使用技巧&quot;">​</a></h2><h3 id="不需要-compile" tabindex="-1">不需要 compile <a class="header-anchor" href="#不需要-compile" aria-label="Permalink to &quot;不需要 compile&quot;">​</a></h3><p>网上很多人的文章中，正则表达式使用re.compile()这个方法，导致代码变成下面这样：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">example_text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;我是kingname, 我的微博账号是: kingname, 密码是: 12345678, QQ账号是: 99999, 密码是: 890abcd, 请记住他们。&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">re.compile(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;账号是: (.*?), 密码是: (.*?), &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, re.S)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">user_pass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(new_pattern, example_text)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user_pass)</span></span></code></pre></div><p>这种写法虽然结果正确，但纯粹是画蛇添足。如果阅读 Python 的正则表达式模块的源代码，就可以看出 re.compile() 是完全没有必要的。</p><p>re.findall() 自带 re.compile() 的功能，所以没有必要使用 re.compile()。</p><h3 id="先抓大后抓小" tabindex="-1">先抓大后抓小 <a class="header-anchor" href="#先抓大后抓小" aria-label="Permalink to &quot;先抓大后抓小&quot;">​</a></h3><p>一些无效内容和有效内容可能具有相同的规则。这种情况下很容易把有效内容和无效内容混在一起，如下面这段文字：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>有效用户: </span></span>
<span class="line"><span>姓名: 张三</span></span>
<span class="line"><span>姓名: 李四</span></span>
<span class="line"><span>姓名: 王五</span></span>
<span class="line"><span>无效用户: </span></span>
<span class="line"><span>姓名: 不知名的小虾米</span></span>
<span class="line"><span>姓名: 隐身的张大侠</span></span></code></pre></div><p>有效用户和无效用户的名字前面都以 &quot;姓名: &quot; 开头，如果使用 &quot;姓名: (.*?)\\n&quot; 来进行匹配，就会把有效信息和无效信息混在一起，难以区分。</p><p>要解决这个问题，就需要使用先抓大再抓小的技巧。先把有效用户这个整体匹配出来，再从有效用户里面匹配出人名。</p><p>先抓大再抓小的思想会贯穿整个爬虫开发过程，一定要重点掌握。</p><h3 id="括号内和括号外" tabindex="-1">括号内和括号外 <a class="header-anchor" href="#括号内和括号外" aria-label="Permalink to &quot;括号内和括号外&quot;">​</a></h3><p>在上面的例子中，括号和 &quot;.*?&quot; 都是一起使用的，因此可能会有读者认为括号内只能有这 3 种字符，不能有其他普通的字符。但实际上，括号内也可以有其他字符。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;div class=&quot;tail-info&quot;&gt;客户端&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;div class=&quot;tail-info&quot;&gt;2017-07-01 13:45:00&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result_1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tail-info&quot;&gt;(.*?)&lt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, html)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result_2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tail-info&quot;&gt;2017(.*?)&lt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, html)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result_3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> re.findall(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tail-info&quot;&gt;(2017.*?)&lt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, html)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;括号里只有 .*? 得到的结果：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(result_1)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 括号里只有 .*? 得到的结果：[&#39;客户端&#39;, &#39;2017-07-01 13:45:00&#39;]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2017 在括号外得到的结果: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(result_2)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2017 在括号外得到的结果: [&#39;-07-01 13:45:00&#39;]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2017 在括号内得到的结果: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(result_3)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2017 在括号内得到的结果: [&#39;2017-07-01 13:45:00&#39;]</span></span></code></pre></div><p>如果括号里面有其他普通字符，那么这些普通字符就会出现在获取的结果里面。举一个例子，如果说&quot;左手和右手之间&quot;，一般指的是躯干这一部分。但如果说&quot;左手和右手之间，包括左手和右手&quot;，那么就是指的整个人。而把普通的字符放在括号里面，就表示结果中需要包含它们。</p>`,38)]))}const o=i(l,[["render",t]]);export{g as __pageData,o as default};
