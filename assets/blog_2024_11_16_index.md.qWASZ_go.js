import{_ as a,c as n,ae as t,o as e}from"./chunks/framework.BzDBnRMZ.js";const i="/assets/demo.CeAkW95b.png",l="/assets/vite.VnSKdObF.png",p="/assets/cargo.BaNf0zJs.png",h="/assets/build.DoSnP0G2.png",k="/assets/package.fhc-jWAm.png",b=JSON.parse('{"title":"如何结合 Vite 和 Rust，在 Vue/React 中运行 WebAssembly 模块？","description":"","frontmatter":{},"headers":[],"relativePath":"blog/2024/11/16/index.md","filePath":"blog/2024/11/16/index.md"}'),r={name:"blog/2024/11/16/index.md"};function d(c,s,g,o,E,u){return e(),n("div",null,s[0]||(s[0]=[t('<h1 id="如何结合-vite-和-rust-在-vue-react-中运行-webassembly-模块" tabindex="-1">如何结合 Vite 和 Rust，在 Vue/React 中运行 WebAssembly 模块？ <a class="header-anchor" href="#如何结合-vite-和-rust-在-vue-react-中运行-webassembly-模块" aria-label="Permalink to &quot;如何结合 Vite 和 Rust，在 Vue/React 中运行 WebAssembly 模块？&quot;">​</a></h1><p>Rust 近年很火热，我跟风尝试入门 Rust 几次，都放弃了。其中一个原因是，Rust 和实际业务关联不强，我很难迁移知识。</p><p>怎样结合 Rust 和前端业务开发？我发现了一个办法，那就是结合 Vite 和 Rust，在 Vue/React 中运行 WebAssembly 模块。现在我把它分享给你。</p><p>本文我会实现一个 Demo，效果如下：</p><p><img src="'+i+'" alt=""></p><ol><li>点击按钮后，Vue/React 代码会调用 Rust 生成的 WebAssembly 代码;</li><li>WebAssembly 代码会生成一串字符串，再返回给 Vue/React 代码；</li><li>Vue/React 把字符串渲染到界面上。</li></ol><p>我是羊肚JUN，一位前端程序员，做有温度的轻知识，有深度的硬内容。</p><h2 id="五个步骤" tabindex="-1">五个步骤 <a class="header-anchor" href="#五个步骤" aria-label="Permalink to &quot;五个步骤&quot;">​</a></h2><p>要实现 Demo，你要经过 5 个步骤：</p><ol><li>用 Vite 创建 Vue/React 项目；</li><li>用 cargo 创建一个 Rust 库；</li><li>打包 Rust 代码；</li><li>在 Vue/React 项目中安装依赖；</li><li>在 Vue/React 项目中使用依赖。</li></ol><h2 id="步骤一-用-vite-创建-vue-react-项目" tabindex="-1">步骤一：用 Vite 创建 Vue/React 项目 <a class="header-anchor" href="#步骤一-用-vite-创建-vue-react-项目" aria-label="Permalink to &quot;步骤一：用 Vite 创建 Vue/React 项目&quot;">​</a></h2><p>先看第一步，直接按 Vite 官网的步骤创建项目，我这里选择了 Vue，你也可以选择 React。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite@latest</span></span></code></pre></div><p><img src="'+l+`" alt=""></p><h2 id="步骤二-用-cargo-创建一个-rust-项目" tabindex="-1">步骤二：用 cargo 创建一个 Rust 项目 <a class="header-anchor" href="#步骤二-用-cargo-创建一个-rust-项目" aria-label="Permalink to &quot;步骤二：用 cargo 创建一个 Rust 项目&quot;">​</a></h2><p>创建 Vue/React 项目后，你可以在 src 目录的同级，利用 Cargo 创建一个 Rust 项目。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 wasm-lib 项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasm-lib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --lib</span></span></code></pre></div><p>之后你需要给这个 Rust 项目安装 wasm-bindgen 依赖，我们可以利用它把 Rust 代码打包为 WebAssembly 模块。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasm-lib</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装 wasm-bindgen 依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasm-bindgen</span></span></code></pre></div><p><img src="`+p+`" alt=""></p><p>你新建的 wasm-lib 目录结构如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>└── wasm-lib</span></span>
<span class="line"><span>  ├──src</span></span>
<span class="line"><span>  │ └──lib.rs</span></span>
<span class="line"><span>  ├──Cargo.lock</span></span>
<span class="line"><span>  └──Cargo.toml</span></span></code></pre></div><p>你需要清空 lib.rs 的默认代码，改成为：</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wasm_bindgen</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prelude</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#[wasm_bindgen]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">pub</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fn</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_rust_message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cnt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> i32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  format!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Rust WebAssembly {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cnt)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这段 Rust 代码的意思是，传入一个名叫 cnt 的正整数，函数会拼接一个字符串再返回。</p><p>其中，<code>#[wasm_bindgen]</code> 宏的作用是标记 get_rust_message 函数，有了这个宏，函数就可以被导出到 WebAssembly 模块中。这样 JavaScript 就能访问这个 Rust 函数。</p><p>然后，我们需要在 Cargo.toml 添加如下配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[lib]</span></span>
<span class="line"><span>crate-type = [&quot;cdylib&quot;]</span></span></code></pre></div><p>它的作用是，告诉 Rust 编译器，构建这个库项目时，要生成 C 语言风格动态链接库。（C - style dynamic library，简称 cdylib）。</p><h2 id="步骤三-打包-rust-代码" tabindex="-1">步骤三：打包 Rust 代码 <a class="header-anchor" href="#步骤三-打包-rust-代码" aria-label="Permalink to &quot;步骤三：打包 Rust 代码&quot;">​</a></h2><p>写完 Rust 代码后，你需要在 wasm-lib 目录下，全局安装 wasm-pack 打包工具。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cargo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasm-pack</span></span></code></pre></div><p>之前的 wasm-bindgen 作用是确定 WebAssembly 和 JavaScript 的绑定关系，真正打包时还需要 wasm-pack 工具。</p><p>安转结束后，你需要输入如下命令，将 lib.rs 的代码打包成适合 web 环境使用的产物，产物的输出目录是 lib 同级的 pkg：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wasm-pack</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> web</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --out-dir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkg</span></span></code></pre></div><p><img src="`+h+`" alt=""></p><p>打包成功后，你可以看到 pkg 的目录结构为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>└── wasm-lib</span></span>
<span class="line"><span>  └── pkg</span></span>
<span class="line"><span>    ├──package.json</span></span>
<span class="line"><span>    ├──wasm_lib_bg.wasm</span></span>
<span class="line"><span>    ├──wasm_lib_bg.d.ts</span></span>
<span class="line"><span>    ├──wasm_lib.d.ts</span></span>
<span class="line"><span>    └──wasm_lib.js</span></span></code></pre></div><p>可以看出生成了个 npm 包，入口文件是 wasm_lib.js，类型文件是 wasm_lib.d.ts。</p><h2 id="步骤四-在-vue-react-项目中安装依赖" tabindex="-1">步骤四：在 Vue/React 项目中安装依赖 <a class="header-anchor" href="#步骤四-在-vue-react-项目中安装依赖" aria-label="Permalink to &quot;步骤四：在 Vue/React 项目中安装依赖&quot;">​</a></h2><p>既然 Rust 打包得到的产物是 npm 包，你便可以在 Vue/React 项目中安转此 npm 包。</p><p>回到 Vue/React 项目目录，输入如下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./wasm-lib/pkg</span></span></code></pre></div><p>安装结束之后，你可以看到 package.json 的 dependencies 会多出一行配置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;wasm-lib&quot;: &quot;file:wasm-lib/pkg&quot;</span></span></code></pre></div><p>它表示 wasm-lib 这个依赖从本地的 <code>wasm-lib/pkg</code> 目录获取。</p><p><img src="`+k+`" alt=""></p><h2 id="步骤五-在-vue-react-项目中使用依赖" tabindex="-1">步骤五：在 Vue/React 项目中使用依赖 <a class="header-anchor" href="#步骤五-在-vue-react-项目中使用依赖" aria-label="Permalink to &quot;步骤五：在 Vue/React 项目中使用依赖&quot;">​</a></h2><p>现在我们开始在 Vue/React 项目中引入之前打好的 npm 包。完整代码如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref, onMounted } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> init, { get_rust_message } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;wasm-lib?init&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cnt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onMounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cnt.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cnt.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  msg.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_rust_message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cnt.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&gt;&gt;&gt;&gt;&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg.value)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Vue Click Cnt: {{ cnt }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Rust Message: {{ msg }}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;onClick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Button&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>你需要注意的是，引入 wasm-lib 时，我们写的是 <code>wasm-lib?init</code>。这是因为按照 <a href="https://vitejs.cn/vite3-cn/guide/features.html#webassembly" target="_blank" rel="noreferrer">vite 的文档</a>，预编译的 WebAssembly 模块需要加上 <code>?init</code> 来导入。</p><p>最后结果如下：</p><p><img src="`+i+'" alt=""></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文我们我通过 5 个步骤，告诉你如何在 Vue/React 项目中使用 Rust 打包的 WebAssembly 代码。</p><p>完整代码我放在 Gitee 上，感兴趣可以下载运行：<a href="https://gitee.com/lijunlin2022/vite-rust" target="_blank" rel="noreferrer">https://gitee.com/lijunlin2022/vite-rust</a></p><p>我是羊肚JUN，一位前端程序员，做有温度的轻知识，有深度的硬内容。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://www.tkat0.dev/posts/how-to-create-a-react-app-with-rust-and-wasm/" target="_blank" rel="noreferrer">How to create a React app with Rust and WebAssembly</a></li></ul>',59)]))}const F=a(r,[["render",d]]);export{b as __pageData,F as default};
