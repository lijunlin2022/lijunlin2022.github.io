"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["7973"],{906:function(r,n,e){e.r(n),e.d(n,{default:function(){return t}});var a=e(85893),d=e(50065);function s(r){let n=Object.assign({p:"p",h2:"h2",a:"a",pre:"pre",code:"code",blockquote:"blockquote"},(0,d.ah)(),r.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"本文介绍了游戏中的地图设计：20 x 20 的数组，其中数组的四边都设置为墙壁。为了更清晰简明地介绍实现方法，采用了先写 C 语言代码，再使用汇编语言实现的办法"}),"\n",(0,a.jsxs)(n.h2,{id:"地图设计",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#地图设计",children:"#"}),"地图设计"]}),"\n",(0,a.jsx)(n.p,{children:"我们的地图设计为 20 x 20 的数组，其中四面都是墙"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{meta:"",children:"#################### // 如果使用 C 语言，则表示为\r\n#..................# // char g_MapDataArr[20][20];\r\n#..................# // 如果将空白设置为 0，墙设置为 0bh\r\n#..................# // 顶墙 g_MapDataArr[0][0-19] = 0bh\r\n#..................# // 底墙 g_MapDataArr[19][0-19] = 0bh\r\n#..................# // 左墙 g_MapDataArr[0-19][0] = 0bh\r\n#..................# // 右墙 g_MapDataArr[0-19][19] = 0bh\r\n#..................#\r\n#..................#\r\n#..................#\r\n#..................#\r\n#..................#\r\n#..................#\r\n#..................#\r\n#..................#\r\n#..................#\r\n#..................#\r\n#..................#\r\n#..................#\r\n####################\n"})}),"\n",(0,a.jsx)(n.p,{children:"关键问题在于：在汇编中我们如何表示二维数组呢？"}),"\n",(0,a.jsxs)(n.h2,{id:"汇编表示二维数组",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#汇编表示二维数组",children:"#"}),"汇编表示二维数组"]}),"\n",(0,a.jsx)(n.p,{children:"内存是线性排列的，相当于一维数组，我们要做的就是将一维数组加以变化后模拟二维数组"}),"\n",(0,a.jsxs)(n.p,{children:["假如我们申请 ",(0,a.jsx)(n.code,{children:"char arr[400]"}),"，要想用它模拟二维数组，则"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{meta:"",children:"######################### // char arr[0-19]\r\n#.......................# // char arr[20-39]\r\n#.......................# // char arr[40-59]\r\n#.......................# // char arr[60-79]\r\n.........................\r\n#.......................# // char arr[260-379]\r\n######################### // char arr[280-399]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["而如果我们想要访问 ",(0,a.jsx)(n.code,{children:"char g_MapDataArr[3][12]"})," 时，我们该如何模拟呢？"]}),"\n",(0,a.jsxs)(n.p,{children:["我们应该用 ",(0,a.jsx)(n.code,{children:"char arr[3 * 20 + 12]"})," 来模拟"]}),"\n",(0,a.jsxs)(n.p,{children:["现在我们来利用汇编，将 ",(0,a.jsx)(n.code,{children:"char g_MapDataArr[3][12]"})," 设置为 0bh"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{meta:"",children:"char g_MapDataArr[3][12];\r\nvoid InitGameMapData() {\r\n  __asm {\r\n    // 初始化 g_MapDataArr 内容全部为 0\r\n    // 调用了 memset 函数\r\n    push 400\r\n    push 0\r\n    lea eax, dword ptr ds:[g_MapDataArr]\r\n    push eax\r\n    call memset\r\n    add esp, 12\r\n    \r\n    lea eax, dword ptr ds:[g_MapDataArr]	// 获得 g_MapDataArr[0][0] 的地址\r\n    mov ecx, 72								// 72 = 20 + 20 + 20 + 12\r\n    mov byte ptr ds:[eax + ecx], 0bh		// 给 g_MapDataArr[3][12] 赋值\r\n  }\r\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"结合循环",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#结合循环",children:"#"}),"结合循环"]}),"\n",(0,a.jsxs)(n.p,{children:["在上一节中，我们使用了 ",(0,a.jsx)(n.code,{children:"mov byte ptr ds:[eax + ecx], 1"})," 来完成赋值"]}),"\n",(0,a.jsx)(n.p,{children:"如果我们将 ecx 设置为变量，在一个循环里面对 ecx 加 1，不就可以完整地对某一行或者某一列进行赋值了吗？"}),"\n",(0,a.jsx)(n.p,{children:"这正是我们的思路，利用变量结合循环给墙壁赋值"}),"\n",(0,a.jsx)(n.p,{children:"用 C 语言表述如下"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",meta:"",children:"int i = 0;\r\nwhile (i >= 19) {\r\n    g_MapDataArr[0][i] = 0xB;	// 顶墙\r\n    g_MapDataArr[19][i] = 0xB;	// 底墙\r\n    g_MapDataArr[i][0] = 0xB;	// 左墙\r\n    g_MapDataArr[i][19] = 0xB;	// 右墙\r\n    i++;\r\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"下面我们来学习汇编的 loop 循环"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{meta:"",children:"  mov ecx, 5\r\n目标地址:\r\n  代码\r\n  loop 目标地址\n"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"loop 指令的执行包含两部，首先，ecx 减 1，接着与 0 相比较，如果 ecx 不等于 0，则跳转到目的地址（表好处）；如果 ecx 等于 0，则不妨生跳转，执行后面的语句。"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"可以看到，loop 循环和我们之前的 C 语言代码逻辑不太一致，我们可以将 C 代码修改一下，使它符合 loop 循环的逻辑"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-c",meta:"",children:"int i = 0;\r\nint j = 20;\r\nwhile (j != 0) {\r\n    g_MapDataArr[0][i] = 0xB;	// 顶墙\r\n    g_MapDataArr[19][i] = 0xB;	// 底墙\r\n    g_MapDataArr[i][0] = 0xB;	// 左墙\r\n    g_MapDataArr[i][19] = 0xB;	// 右墙\r\n    i++;\r\n    j--;\r\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"与之对应的汇编语句为："}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{meta:"",children:"; 使用循环设置地图的边界\r\n    mov dword ptr ds : [i] , 0\r\n    mov ecx, 20;\r\nset_wall:\r\n    ; 顶墙\r\n    lea eax, dword ptr ds : [g_MapDataArr]\r\n    mov ebx, dword ptr ds : [i]\r\n    mov byte ptr ds : [eax + ebx] , 0bh\r\n    ; 底墙\r\n    lea eax, dword ptr ds : [g_MapDataArr]\r\n    mov ebx, 19\r\n    imul ebx, ebx, 20\r\n    add eax, ebx\r\n    mov ebx, dword ptr ds : [i]\r\n    mov byte ptr ds : [eax + ebx] , 0bh\r\n    ; 左墙\r\n    lea eax, dword ptr ds : [g_MapDataArr]\r\n    mov ebx, dword ptr ds : [i]\r\n    imul ebx, ebx, 20\r\n    mov byte ptr ds : [eax + ebx] , 0bh\r\n    ; 右墙\r\n    lea eax, dword ptr ds:[g_MapDataArr]\r\n    mov ebx, dword ptr ds : [i]\r\n    imul ebx, ebx, 20\r\n    add ebx, 19\r\n    mov byte ptr ds : [eax + ebx] , 0bh\r\n    ; i 自减\r\n    mov ebx, dword ptr ds : [i]\r\n    inc ebx\r\n    mov dword ptr ds : [i] , ebx\r\n    loop set_wall\n"})}),"\n",(0,a.jsxs)(n.p,{children:["这也正是我代码中的函数 ",(0,a.jsx)(n.code,{children:"setWall()"})," 的主要内容，稍有不同的是，在游戏中我设置的地图为 25 x 25 大小，并且在设置墙壁之前，我先把墙壁所在的内存给清空，清空的函数是 ",(0,a.jsx)(n.code,{children:"initMapData()"})]})]})}function c(){let r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),r.components);return n?(0,a.jsx)(n,Object.assign({},r,{children:(0,a.jsx)(s,r)})):s(r)}let t=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["zh%2Fdocs%2Fbit-life%2Fsnake%2Floop.md"]={toc:[{id:"地图设计",text:"地图设计",depth:2},{id:"汇编表示二维数组",text:"汇编表示二维数组",depth:2},{id:"结合循环",text:"结合循环",depth:2}],title:"",frontmatter:{}}}}]);