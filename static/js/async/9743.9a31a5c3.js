"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["9743"],{12110:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var s=r("85893"),i=r("50065");let t=r.p+"static/image/jwt.0e252b1a.png";var o=r("41262");function l(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",ol:"ol",li:"li",img:"img",pre:"pre",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"开发流程",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开发流程",children:"#"}),"开发流程"]}),"\n",(0,s.jsxs)(n.h2,{id:"json-web-token-流程",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#json-web-token-流程",children:"#"}),"JSON Web Token 流程"]}),"\n",(0,s.jsx)(n.p,{children:"一般流程："}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"用户在客户端提供身份信息（一般是用户名和密码）"}),"\n",(0,s.jsx)(n.li,{children:"服务器认证后，生成一个 JSON 对象，加密（防止用户篡改）后生成 Token 发给用户"}),"\n",(0,s.jsx)(n.li,{children:"客户端将 Token 保存到本地"}),"\n",(0,s.jsx)(n.li,{children:"客户端每次请求时将 Token 附加在请求头部"}),"\n",(0,s.jsx)(n.li,{children:"服务器接到请求后，验证 Token 的有效性，并根据 Token 的信息进行授权"}),"\n"]}),"\n",(0,s.jsxs)(o.Tabs,{children:[(0,s.jsxs)(o.Tab,{value:"服务器生成 Token",label:"服务器生成 Token",children:[(0,s.jsx)(n.p,{children:"服务器生成的 Token 由三部分组成："}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t})})]}),(0,s.jsx)(o.Tab,{value:"代码",label:"代码",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",meta:"",children:"const jws = require('jws')\r\n\r\nconst config = {\r\n  algorithm: 'HS256',\r\n  secret: 'xxx'\r\n}\r\n\r\nmodule.exports.sign = async function (payload, exp) {\r\n  const r = {\r\n    iat: new Date().getTime() / 1000,\r\n    exp,\r\n    payload\r\n  }\r\n\r\n  const promise = new Promise((resolve, reject) => {\r\n    jws.createSign({\r\n      header: { alg: config.algorithm },\r\n      secret: config.secret,\r\n      payload: JSON.stringify(r)\r\n    }).on('done', function (signature) {\r\n      resolve(signature)\r\n    })\r\n  })\r\n\r\n  return promise\r\n}\n"})})})]}),"\n",(0,s.jsxs)(o.Tabs,{children:[(0,s.jsx)(o.Tab,{value:"服务器验证 Token",label:"服务器验证 Token",default:!0,children:(0,s.jsx)(n.p,{children:"传入签名后，服务器利用自己保存好的秘钥解密，然后验证功能。"})}),(0,s.jsx)(o.Tab,{value:"代码",label:"代码",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",meta:"",children:"const jws = require('jws')\r\n\r\nconst config = {\r\n  algorithm: 'HS256',\r\n  secret: 'xxx'\r\n}\r\n\r\nmodule.exports.verify = function (signature) {\r\n  const promise = new Promise((resolve, reject) => {\r\n    jws.createVerify({\r\n      algorithm: config.algorithm,\r\n      secret: config.secret,\r\n      signature\r\n    }).on('done', function (verified, obj) {\r\n      if (verified) {\r\n        const r = JSON.parse(obj.payload)\r\n        resolve(r)\r\n      } else {\r\n        reject()\r\n      }\r\n    })\r\n  })\r\n\r\n  return promise\r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.h2,{id:"json-web-token-优缺点",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#json-web-token-优缺点",children:"#"}),"JSON Web Token 优缺点"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"优点"}),(0,s.jsx)(n.th,{children:"缺点"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"有效使用 JWT，可以降低服务器查询数据库的次数"}),(0,s.jsx)(n.td,{children:"服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{}),(0,s.jsx)(n.td,{children:"JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限"})]})]})]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(l,e)})):l(e)}let a=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["zh%2Fdocs%2F%E4%B8%AA%E4%BA%BA%E5%BC%80%E5%8F%91%2F%E8%B4%A6%E5%8F%B7%2F%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B.mdx"]={toc:[{id:"json-web-token-流程",text:"JSON Web Token 流程",depth:2},{id:"json-web-token-优缺点",text:"JSON Web Token 优缺点",depth:2}],title:"开发流程",frontmatter:{}}}}]);