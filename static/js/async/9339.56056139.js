"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["9339"],{4834:function(e,n,t){t.r(n),t.d(n,{default:()=>a});var l=t("5893"),i=t("65");let r=t.p+"static/image/set-maxWidth.6da31631.jpg",x=t.p+"static/image/product.4ae1fcb5.png",s=t.p+"static/image/example.44229c8e.png";function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",img:"img",code:"code",h2:"h2",blockquote:"blockquote",ul:"ul",li:"li",pre:"pre"},(0,i.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.h1,{id:"从商品海报说起canvas-文本如何实现溢出截断溢出显示省略号和自动换行",children:["从商品海报说起，canvas 文本如何实现溢出截断、溢出显示省略号和自动换行？",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#从商品海报说起canvas-文本如何实现溢出截断溢出显示省略号和自动换行",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"几乎所有电商 App 都有分享商品功能，功能包括分享 H5、小程序、朋友圈，还有一些 App 能生成海报。例如盒马、得物和唯品会："}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:s,alt:""})}),"\n",(0,l.jsx)(n.p,{children:"现在我们有一件新款爆款 T 恤，需要生成带商品名的海报，你会怎么做呢？"}),"\n",(0,l.jsx)(n.p,{children:"前端同学一般会用 canvas 绘制海报图片、文字，但 canvas 处理文本的能力非常弱，没有原生 API 直接实现溢出截断、溢出显示省略号和自动换行。"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:x,alt:""})}),"\n",(0,l.jsxs)(n.p,{children:["本文我会先介绍 canvas 原生处理文本的 API，然后给出函数 ",(0,l.jsx)(n.code,{children:"fillTruncateText"}),"，",(0,l.jsx)(n.code,{children:"fillEllipsisText"})," 和 ",(0,l.jsx)(n.code,{children:"fillWrapText"}),"，分别实现 canvas 文本溢出截断、溢出显示省略号和自动换行。"]}),"\n",(0,l.jsx)(n.p,{children:"拳打 H5，脚踢小程序。我是「小霖家的混江龙」，关注我，带你了解更多实用的 H5、小程序武学。"}),"\n",(0,l.jsxs)(n.h2,{id:"filltext",children:["fillText",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#filltext",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["canvas 填充文字的 API 为 ",(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/fillText",target:"_blank",rel:"noopener noreferrer",children:"fillText"}),"，它有 4 个参数："]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"text，需要渲染的文本字符串。"}),"\n",(0,l.jsx)(n.li,{children:"x，填充文本的 x 坐标，单位为像素。"}),"\n",(0,l.jsx)(n.li,{children:"y，填充文本基线的 y 坐标，单位为像素。"}),"\n",(0,l.jsx)(n.li,{children:"maxWidth，填充文本的最大宽度，如果未指定，则文本宽度没有限制。"}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"其中，maxWidth 基本没啥用处，设置它既不能实现溢出截断，也不能实现溢出显示省略号。它会压缩文字，在指定 maxWidth 显示文本。"}),"\n",(0,l.jsx)(n.p,{children:"举例如下，第一行文本未指定 maxWidth，第二行文本指定了 maxWidth："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"const canvas = document.getElementById(\"canvas\")\r\nconst ctx = canvas.getContext('2d')\r\n\r\nctx.font = '16px Arial'\r\nctx.fillStyle = '#222426'\r\nconst text = '2024 Trump 川普特朗普新款 T 恤周边'\r\nctx.fillText(text, 0, 20)\r\nctx.fillText(text, 0, 120, 200)\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)("img",{src:r,alt:""})}),"\n",(0,l.jsx)(n.p,{children:"可以看到 maxWidth 难堪大用。"}),"\n",(0,l.jsx)(n.p,{children:"既然原生的 fillText 作用有限，我们便需要自己编写一些函数，实现文本溢出截断、溢出显示省略号和自动换行。"}),"\n",(0,l.jsxs)(n.h2,{id:"filltruncatetext",children:["fillTruncateText",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#filltruncatetext",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"我们先看溢出截断。"}),"\n",(0,l.jsxs)(n.p,{children:["要实现溢出截断功能，我们需要用到 canvas 的一个 API ",(0,l.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/measureText",target:"_blank",rel:"noopener noreferrer",children:"measureText"}),"，它可以测量文本并返回一个对象（对象中包含了文本宽度）。"]}),"\n",(0,l.jsxs)(n.p,{children:["我们可以用 ",(0,l.jsx)(n.code,{children:"measureText"})," 测量要填充的文本，如果文本宽度小于等于 maxWidth，便正常用 fillText 填充文本；如果文本宽度大于 maxWidth，我们便从文本后方一点一点往前缩短文本，直到文本宽度小于等于 maxWidth。"]}),"\n",(0,l.jsxs)(n.p,{children:["按此思路实现的 ",(0,l.jsx)(n.code,{children:"fillTruncateText"})," 函数如下："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"function fillTruncateText ({\r\n  ctx,\r\n  text,\r\n  x,\r\n  y,\r\n  maxWidth,\r\n  font,\r\n  fillStyle\r\n}) {\r\n  ctx.font = font\r\n  ctx.fillStyle = fillStyle\r\n  const textWidth = ctx.measureText(text).width\r\n  if (textWidth <= maxWidth) {\r\n    ctx.fillText(text, x, y)\r\n    return\r\n  }\r\n  let len = text.length\r\n  let sliceText = text\r\n  let width = textWidth\r\n  while (width > maxWidth && len > 0) {\r\n    len -= 1\r\n    sliceText = text.slice(0, len)\r\n    width = ctx.measureText(sliceText).width\r\n  }\r\n  ctx.fillText(sliceText, x, y)\r\n}\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"fillellipsistext",children:["fillEllipsisText",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fillellipsistext",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"再看溢出显示省略号。"}),"\n",(0,l.jsxs)(n.p,{children:["溢出显示省略号的思路和截断基本一致，如果文本宽度小于等于 maxWidth，便正常用 fillText 填充文本；如果文本宽度大于 maxWidth，我们便从文本后方一点一点往前缩短文本，直到",(0,l.jsx)(n.code,{children:"文本宽度 + 省略号宽度 <= maxWidth"}),"。"]}),"\n",(0,l.jsxs)(n.p,{children:["按此思路实现的 ",(0,l.jsx)(n.code,{children:"fillEllipsisText"})," 如下："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"function fillEllipsisText ({\r\n  ctx,\r\n  text,\r\n  x, \r\n  y,\r\n  maxWidth,\r\n  font,\r\n  fillStyle\r\n}) {\r\n  ctx.font = font\r\n  ctx.fillStyle = fillStyle\r\n  const ellipsis = '...'\r\n  const ellipsisWidth = ctx.measureText(ellipsis).width\r\n  const textWidth = ctx.measureText(text).width\r\n  if (ellipsisWidth + textWidth <= maxWidth) {\r\n    ctx.fillText(text, x, y)\r\n    return\r\n  }\r\n  let len = text.length\r\n  let sliceText = text\r\n  let width = textWidth\r\n  while (width + ellipsisWidth > maxWidth && len > 0) {\r\n    len -= 1\r\n    sliceText = text.slice(0, len)\r\n    width = ctx.measureText(sliceText).width\r\n  }\r\n  ctx.fillText(`${sliceText}${ellipsis}`, x, y)\r\n}\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"fillwraptext",children:["fillWrapText",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#fillwraptext",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"最后看文本自动换行。"}),"\n",(0,l.jsx)(n.p,{children:"和溢出截断、溢出显示省略号从后往前缩短文本的思路不同，文本自动换行的思路是从前往后慢慢增加文本，如果文本宽度超过 maxWidth，则开始填充下一行文本。"}),"\n",(0,l.jsx)(n.p,{children:"具体来说："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"初始时，文本自动换行会先把文本拆分为一个数组 arrText，然后从下标 0 开始，逐个取出数组中的文字，慢慢拼接新的字符串。如果到下标 i 时字符串的宽度已经大于 maxWidth，则先绘制 i 以前的字符。"}),"\n",(0,l.jsxs)(n.li,{children:["然后另起一行，这一行的初始字符为 ",(0,l.jsx)(n.code,{children:"arrText[i]"}),"，基线 y 的坐标则为 ",(0,l.jsx)(n.code,{children:"y + lineHeight"}),"。此后又开始逐个从数组中取出文本。直到发现这一行宽度又大于了 maxWidth。"]}),"\n",(0,l.jsx)(n.li,{children:"另起一行，如此循环，直到数组 arrText 中的字符已经全部用光。"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["按此思路实现的 ",(0,l.jsx)(n.code,{children:"fillWrapText"})," 代码如下："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"function fillWrapText ({\r\n  ctx,\r\n  text,\r\n  x,\r\n  y,\r\n  maxWidth,\r\n  lineHeight,\r\n  font,\r\n  fillStyle\r\n}) {\r\n  ctx.font = font\r\n  ctx.fillStyle = fillStyle\r\n  const arrText = text.split('')\r\n  let line = ''\r\n\r\n  for (let i = 0; i < arrText.length; i++) {\r\n    let testLine = line + arrText[i]\r\n    let testWidth = ctx.measureText(testLine).width\r\n    if (testWidth > maxWidth) {\r\n      ctx.fillText(line, x, y)\r\n      line = arrText[i]\r\n      y += lineHeight\r\n    } else {\r\n      line = testLine\r\n    }\r\n  }\r\n  ctx.fillText(line, x, y)\r\n}\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"示例代码",children:["示例代码",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例代码",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"光靠文章比较枯燥，我给三个工具写了示例，你可以在 codepen 或者码上掘金上查看："}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["codepen: ",(0,l.jsx)(n.a,{href:"https://codepen.io/lijunlin2022/pen/xxoxVaK",target:"_blank",rel:"noopener noreferrer",children:"https://codepen.io/lijunlin2022/pen/xxoxVaK"})]}),"\n",(0,l.jsxs)(n.li,{children:["码上掘金: ",(0,l.jsx)(n.a,{href:"https://code.juejin.cn/pen/7391408282185531419",target:"_blank",rel:"noopener noreferrer",children:"https://code.juejin.cn/pen/7391408282185531419"})]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"总结",children:["总结",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["本文我会先介绍 canvas 原生处理文本的 API，然后给出函数 ",(0,l.jsx)(n.code,{children:"fillTruncateText"}),"，",(0,l.jsx)(n.code,{children:"fillEllipsisText"})," 和 ",(0,l.jsx)(n.code,{children:"fillWrapText"}),"，分别实现 canvas 文本溢出截断、溢出显示省略号和自动换行。"]}),"\n",(0,l.jsx)(n.p,{children:"拳打 H5，脚踢小程序。我是「小霖家的混江龙」，关注我，带你了解更多实用的 H5、小程序武学。"}),"\n",(0,l.jsxs)(n.h2,{id:"参考文章",children:["参考文章",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参考文章",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://www.zhangxinxu.com/wordpress/2018/02/canvas-text-break-line-letter-spacing-vertical/",target:"_blank",rel:"noopener noreferrer",children:"canvas文本绘制自动换行、字间距、竖排等实现 | 张鑫旭"})}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["blog%2F2024%2F07-15%2Findex.md"]={toc:[{text:"fillText",id:"filltext",depth:2},{text:"fillTruncateText",id:"filltruncatetext",depth:2},{text:"fillEllipsisText",id:"fillellipsistext",depth:2},{text:"fillWrapText",id:"fillwraptext",depth:2},{text:"示例代码",id:"示例代码",depth:2},{text:"总结",id:"总结",depth:2},{text:"参考文章",id:"参考文章",depth:2}],title:"从商品海报说起，canvas 文本如何实现溢出截断、溢出显示省略号和自动换行？",frontmatter:{}}}}]);