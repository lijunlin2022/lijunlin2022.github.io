"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["3816"],{5914:function(n,e,d){d.r(e),d.d(e,{default:function(){return c}});var r=d(5893),s=d(65);function a(n){let e=Object.assign({p:"p",h2:"h2",a:"a",pre:"pre",code:"code",blockquote:"blockquote",ul:"ul",li:"li"},(0,s.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"本节介绍了如何利用 rand、srand 和 time 生成随机数，以及 idiv 指令和 cdq 指令的用法，然后通过这些知识，在墙壁范围内随机设置了食物的位置和蛇头的位置"}),"\n",(0,r.jsxs)(e.h2,{id:"食物的位置设计思路",children:["食物的位置设计思路",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#食物的位置设计思路",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"游戏开始时，食物会随机出现在墙壁内，当蛇吃下食物后，原本的食物消失且新的位置将会生成食物"}),"\n",(0,r.jsx)(e.p,{children:"关键问题在于，如何生成随机的食物，这个问题我们在 (3) 时会谈到"}),"\n",(0,r.jsxs)(e.h2,{id:"蛇头的位置设计思路",children:["蛇头的位置设计思路",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#蛇头的位置设计思路",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"和食物一样，蛇头的位置也应该是随机出现的，但应该和食物随机出现的位置不同。蛇头还要考虑到今后吃下食物之后，蛇会变长"}),"\n",(0,r.jsx)(e.p,{children:"我们使用一个结构体数组来存储蛇的位置"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"struct SnakePos {\r\n	int x;\r\n	int y;\r\n} globalSnakeArr[100];\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"globalSnakeArr[0]"})," 用来存储蛇头的坐标，至于吃到食物如何增长，以及蛇如何移动，我们之后再谈"]}),"\n",(0,r.jsxs)(e.h2,{id:"rand-srand-和-time",children:["rand, srand 和 time",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#rand-srand-和-time",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["在 C 语言的头文件 ",(0,r.jsx)(e.code,{children:"stdlib.h"})," 中有一个函数 ",(0,r.jsx)(e.code,{children:"rand()"}),"，它可以返回一个范围在 ",(0,r.jsx)(e.code,{children:"0"})," 到 ",(0,r.jsx)(e.code,{children:"RAND_MAX"})," 的伪随机整数。"]}),"\n",(0,r.jsxs)(e.p,{children:["在调用 ",(0,r.jsx)(e.code,{children:"rand()"})," 函数之前，可以使用 ",(0,r.jsx)(e.code,{children:"srand()"})," 设置随机数种子，如果没有设置随机数种子，",(0,r.jsx)(e.code,{children:"rand()"})," 会自动设置随机数种子为 ",(0,r.jsx)(e.code,{children:"1"})]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"srand(unsigned seed)"})," 通过参数 ",(0,r.jsx)(e.code,{children:"seed"})," 改变系统提供的种子值，从而可以使每次调用 ",(0,r.jsx)(e.code,{children:"rand()"})," 函数生成的伪随机数序列不同，通常利用系统时间来改变系统的种子值，即 ",(0,r.jsx)(e.code,{children:"srand(time(NULL))"})]}),"\n"]}),"\n",(0,r.jsxs)(e.h2,{id:"idiv-指令",children:["idiv 指令",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#idiv-指令",children:"#"})]}),"\n",(0,r.jsxs)(e.p,{children:["假设墙壁是 20 \xd7 20 的宽度，为了让食物出现在墙壁内，需要对生成的随机数取 20 的余数，这时候我们就需要使用一个指令 ",(0,r.jsx)(e.code,{children:"idiv"})]}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"该指令只含有一个源操作符，该操作符作为除数使用。注意，它只能是寄存器或存储器操作数，不能是立即数。被除数必须实现放在隐含的寄存器中。可以实现 8 位、16 位、32 位带符号操作数除。"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"若源操作数是 8 位，则被除数放在 AX 中，商在 AL 中，余数在 AH 中"}),"\n",(0,r.jsx)(e.li,{children:"若源操作数是 16 位，则被除数在 DX:AX 一对寄存器中，商在 AX 中，余数在 DX 中"}),"\n",(0,r.jsx)(e.li,{children:"若源操作数是 32 位，则被除数在 EDX:EAX 一对寄存器中，商在 EAX 中，余数在 EDX 中"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"—— 《汇编语言与接口计数（李元章）》"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"所以当使用好 idiv 指令之后，我们想要的余数就在 EDX 中"}),"\n",(0,r.jsxs)(e.h2,{id:"实际代码",children:["实际代码",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实际代码",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"这是生成食物的代码："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"void generateRandomFood() {\r\n	__asm {\r\n		// 获取时间	\r\n		push 0\r\n		call time\r\n		add esp, 4\r\n		// 设置随机数种子\r\n		push eax\r\n		call srand\r\n		add esp, 4\r\n		// 获取 x 坐标值\r\n		call rand\r\n		cdq\r\n		mov ecx, 25\r\n		idiv ecx\r\n		mov dword ptr ds : [globalFoodX] , edx\r\n		// 获取 y 坐标值\r\n		call rand\r\n		cdq\r\n		mov ecx, 25\r\n		idiv ecx\r\n		mov dword ptr ds : [globalFoodY] , edx\r\n	}\r\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"这是生成蛇头位置的代码："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:"void setSnakePosition() {\r\n	__asm {\r\n	set_snake_pos:\r\n		call generateRandomSnakeHead\r\n\r\n		lea eax, dword ptr ds : [globalMapArr]\r\n		mov ecx, dword ptr ds : [globalInitialSnakeHeadX]\r\n		imul ecx, ecx, 25\r\n		add eax, ecx\r\n		mov edx, dword ptr ds : [globalInitialSnakeHeadY]\r\n		add eax, edx\r\n\r\n		mov cl, byte ptr ds : [eax]\r\n		cmp cl, 0xB\r\n		// 如果和墙重叠, 则回到开始位置, 重新生成蛇头\r\n		je set_snake_pos\r\n\r\n		// 生成的蛇头满足要求, 则写入蛇的结构体\r\n		lea eax, dword ptr ds : [globalSnakeArr]\r\n		mov ecx, dword ptr ds : [globalSnakeLen]\r\n		imul ecx, ecx, 8\r\n		add eax, ecx\r\n\r\n		mov ecx, dword ptr ds : [globalInitialSnakeHeadX]\r\n		mov dword ptr ds : [eax] , ecx\r\n\r\n		mov ecx, dword ptr ds : [globalInitialSnakeHeadY]\r\n		mov dword ptr ds : [eax + 4] , ecx\r\n\r\n		// 设置蛇的长度为 1\r\n		mov dword ptr ds : [globalSnakeLen] , 1\r\n	}\r\n}\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"cdq-指令",children:["cdq 指令",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#cdq-指令",children:"#"})]}),"\n",(0,r.jsx)(e.p,{children:"上面的代码中出现了 cdq 指令"}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"双字扩展成四字指令 CDQ (Convert Double to Quad)"}),"\n",(0,r.jsx)(e.p,{children:"格式：CDQ"}),"\n",(0,r.jsx)(e.p,{children:"功能：把 EAX 寄存器中的符号位值扩展到 EDX 中"}),"\n",(0,r.jsx)(e.p,{children:"说明：80386 以上 CPU 支持此指令"}),"\n",(0,r.jsx)(e.p,{children:"—— 《汇编语言与接口计数（李元章）》"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"在很久以前指令集规定除数必须是被除数的一半长，所以需要 CDQ 指令"}),"\n",(0,r.jsx)(e.p,{children:"经过我在 VS 2019 里面测试，不使用 CDQ 运行也是没有问题的"})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(a,{...n})}):a(n)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["docs%2Fbit-life%2Fsnake%2Fidiv.md"]={toc:[{text:"食物的位置设计思路",id:"食物的位置设计思路",depth:2},{text:"蛇头的位置设计思路",id:"蛇头的位置设计思路",depth:2},{text:"rand, srand 和 time",id:"rand-srand-和-time",depth:2},{text:"idiv 指令",id:"idiv-指令",depth:2},{text:"实际代码",id:"实际代码",depth:2},{text:"cdq 指令",id:"cdq-指令",depth:2}],title:"",frontmatter:{}}}}]);