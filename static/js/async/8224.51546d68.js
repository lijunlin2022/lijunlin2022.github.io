"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["8224"],{8835:function(r,e,n){n.r(e),n.d(e,{default:function(){return l}});var a=n(5893),t=n(65);function c(r){let e=Object.assign({h1:"h1",a:"a",p:"p",pre:"pre",code:"code"},(0,t.ah)(),r.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h1,{id:"顶点着色器和片元着色器",children:["顶点着色器和片元着色器",(0,a.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#顶点着色器和片元着色器",children:"#"})]}),"\n",(0,a.jsx)(e.p,{children:"着色器，就是让开发者自己去编写一段程序，用来代替固定渲染管线，来处理图片的渲染。"}),"\n",(0,a.jsx)(e.p,{children:"顶点着色器，三维的坐标；片元着色器，可以理解为一个像素。JavaScript 读取相关着色器信息，传递给 webgl 并进行使用。"}),"\n",(0,a.jsx)(e.p,{children:"最基础的，绘制一个点的 webgl 程序："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-html",children:'<canvas id="canvas" width="400" height="400"></canvas>\n'})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:"const canvas = document.getElementById('canvas')\r\nconst gl = canvas.getContext('webgl')\r\n\r\nconst VERTEX_SHADER_SOURCE = `\r\n  void main() {\r\n    // 要绘制的点坐标分别是 x y z 和 w, 其中 w 是其次坐标 (x/w, y/w, z/w)\r\n    gl_Position = vec4(0.0, 0.0, 0.0, 1.0);\r\n    // 点的大小\r\n    gl_PointSize = 40.0;\r\n  }\r\n`\r\n\r\n\r\nconst FRAGMENT_SHADER_SOURCE = `\r\n  void main() {\r\n    // 颜色, 其中分别是 r g b 和 a\r\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n  }\r\n`\r\n\r\n// 创建着色器\r\nconst vertexShader = gl.createShader(gl.VERTEX_SHADER)\r\nconst fragementShader = gl.createShader(gl.FRAGMENT_SHADER)\r\n\r\n// 绑定源码\r\ngl.shaderSource(vertexShader, VERTEX_SHADER_SOURCE)\r\ngl.shaderSource(fragementShader, FRAGMENT_SHADER_SOURCE)\r\n\r\n// 编译着色器\r\ngl.compileShader(vertexShader)\r\ngl.compileShader(fragementShader)\r\n\r\n// 创建一个程度对象\r\nconst program = gl.createProgram()\r\n\r\ngl.attachShader(program, vertexShader)\r\ngl.attachShader(program, fragementShader)\r\n\r\ngl.linkProgram(program)\r\ngl.useProgram(program)\r\n\r\n// 执行绘制, 参数分别代表: 要绘制的图像, 开始位置, 使用几个顶点\r\ngl.drawArrays(gl.POINTS, 0, 1)\n"})}),"\n",(0,a.jsx)(e.p,{children:"其中，顶点着色器和片元着色器程序中，必须有分号。"}),"\n",(0,a.jsx)(e.p,{children:"上述 js 代码中，可以封装一个初始化着色器的函数："}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:"function initShader(gl, vertexSource, fragementSource) {\r\n  const vertexShader = gl.createShader(gl.VERTEX_SHADER)\r\n  const fragementShader = gl.createShader(gl.FRAGMENT_SHADER)\r\n\r\n  // 绑定源码\r\n  gl.shaderSource(vertexShader, VERTEX_SHADER_SOURCE)\r\n  gl.shaderSource(fragementShader, FRAGMENT_SHADER_SOURCE)\r\n\r\n  // 编译着色器\r\n  gl.compileShader(vertexShader)\r\n  gl.compileShader(fragementShader)\r\n\r\n  // 创建一个程度对象\r\n  const program = gl.createProgram()\r\n\r\n  gl.attachShader(program, vertexShader)\r\n  gl.attachShader(program, fragementShader)\r\n\r\n  gl.linkProgram(program)\r\n  gl.useProgram(program)\r\n\r\n  return program\r\n}\n"})})]})}function g(){let r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,t.ah)(),r.components);return e?(0,a.jsx)(e,{...r,children:(0,a.jsx)(c,{...r})}):c(r)}let l=g;g.__RSPRESS_PAGE_META={},g.__RSPRESS_PAGE_META["docs%2Fwebgl%2F01-vertex-and-fragment.md"]={toc:[],title:"顶点着色器和片元着色器",frontmatter:{}}}}]);