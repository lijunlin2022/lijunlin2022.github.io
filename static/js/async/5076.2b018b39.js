"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["5076"],{7270:function(e,n,r){r.r(n),r.d(n,{default:function(){return h}});var s=r(5893),d=r(65);function l(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",pre:"pre",code:"code",p:"p",strong:"strong",ul:"ul",li:"li"},(0,d.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"数据结构和控制结构",children:["数据结构和控制结构",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据结构和控制结构",children:"#"})]}),"\n",(0,s.jsxs)(n.h2,{id:"字符串列表和元组",children:["字符串、列表和元组",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串列表和元组",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"元组",children:["元组",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#元组",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"tuple_1 = (1, 2, 3, 4, 5) # 元组里面有 5 个元素，全部为数字\r\ntuple_2 = ('abc', 'x', '', 'kkk') # 元组里面有 4 个元素，全部是字符串\r\ntuple_3 = () # 空元组\r\ntuple_4 = (123, 'xyz', [1, 't', 'z'], ('o', 'pp')) # 由多种元素组合起来的元组\n"})}),"\n",(0,s.jsx)(n.p,{children:"元组和列表的区别：列表生成以后还可以往里面继续添加数据，也可以从里面删除数据；元组一旦生成就不能修改。"}),"\n",(0,s.jsx)(n.p,{children:"如果一个元组里面只有整数、浮点数、字符串、另一个元组，这个元组既不能添加数据，也不能删除数据，还不能修改里面数据的值；如果一个元组里面包含了一个列表，这个元组里面的列表依旧可以变化。"}),"\n",(0,s.jsxs)(n.h2,{id:"数据读取",children:["数据读取",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据读取",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"之所以要把字符串、列表和元组放在一起介绍，是因为可以使用完全一样的方式从这3个数据结构中读取数据。"}),"\n",(0,s.jsxs)(n.h3,{id:"指定下标",children:["指定下标",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#指定下标",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"在大多数编程语言里面，下标都是从 0 开始的，Python 也不例外。第 0 个元素就是指最左边的元素。"}),"\n",(0,s.jsxs)(n.p,{children:["有所不同的是，Python 下标还有负数。",(0,s.jsx)(n.strong,{children:"-1 表示最后一个元素，-2 表示倒数第 2 个元素，-3 表示倒数第 3 个元素，以此类推"}),"。"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"example_string = '我是字符串'\r\nexample_list = ['我', '是', '列', '表']\r\nexample_tuple = ('我', '是', '元', '组')\r\n\r\nprint(example_string[0]) # '我'\r\nprint(example_list[0]) # '我'\r\nprint(example_tuple[0]) # '我'\r\n\r\nprint(example_string[-1]) # 倒数第一个，'串'\r\nprint(example_list[-2]) # 倒数第二个，'列'\r\nprint(example_tuple[-3]) # 倒数第三个，'是'\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"切片",children:["切片",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#切片",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"字符串切片以后的结果还是字符串，列表切片以后的结果还是列表，元组切片以后的结果还是元组。切片的格式为："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"变量名[开始位置下标:结束位置下标:步长]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print(example_string[1:3]) # 是字\n"})}),"\n",(0,s.jsxs)(n.p,{children:["这 3 个参数对应的都是数字。切片的结果包括",(0,s.jsx)(n.code,{children:"开始位置下标"}),"所对应的元素，但是不包括",(0,s.jsx)(n.code,{children:"结束位置下标"}),"所对应的元素。其中",(0,s.jsx)(n.code,{children:"开始位置下标"}),"，",(0,s.jsx)(n.code,{children:"结束位置下标"}),"，",(0,s.jsx)(n.code,{children:"步长"}),"可以部分省略，但是不能全部省略。"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["省略",(0,s.jsx)(n.code,{children:"开始位置下标"}),"，表示从下标为 0 的元素开始计算。"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print(example_list[:3]) # ['我', '是', '列']\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["省略",(0,s.jsx)(n.code,{children:"结束位置下标"}),"，表示直到最后一个元素且包含最后一个元素。"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print(example_tuple[2:]) # ('元', '组')\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["省略",(0,s.jsx)(n.code,{children:"开始位置下标"}),"和",(0,s.jsx)(n.code,{children:"结束位置下标"}),"，",(0,s.jsx)(n.code,{children:"步长"}),"取 -1，表示倒序输出。"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"print(example_string[::-1]) # 串符字是我\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"拼接与修改",children:["拼接与修改",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#拼接与修改",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"字符串与字符串之间（列表与列表之间、元组和元组之间）可以相加，相加表示两个字符串（列表、元组）拼接起来。"}),"\n",(0,s.jsx)(n.p,{children:"列表可以通过下标修改里面的值，字符串和元组则不可以。"}),"\n",(0,s.jsxs)(n.p,{children:["列表可以通过 ",(0,s.jsx)(n.code,{children:"append()"})," 在末尾添加元素，字符串和元组也不可以。"]}),"\n",(0,s.jsxs)(n.h2,{id:"字典与集合",children:["字典与集合",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字典与集合",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"字典",children:["字典",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#字典",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"字典就是使用大括号括起来的键（Key）值（Value）对（Key-Value对）。每个键值对之间使用英文逗号分隔，每个 Key 与 Value 之间使用英文冒号分隔。"}),"\n",(0,s.jsx)(n.p,{children:"Key 可以使用中文、英文或者数字，但是不能重复。Value 可以是任意字符串、数字、列表、元组或者另一个字典，Value 可以重复。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"dict_1 = {\r\n  'superman': '超人是一个可以在天上飞的两足兽',\r\n  '天才': '天才跑在时代的前面，把时代拖得气喘吁吁。',\r\n  'xx': 0,\r\n  42: '42是一切的答案'\r\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"可以通过 Key 来从字典中读取对应的 Value，有 3 种主要的格式："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"变量名[key]\r\n变量名.get(key)\r\n变量名.get(key, '在找不到key的情况下使用这个值')\n"})}),"\n",(0,s.jsxs)(n.p,{children:["使用方括号的方式来读取字典的 Value 时，一定要保证字典里面有这个 Key 和它对应的 Value，否则程序会报错。使用 get 来读取，如果 get 只有一个参数，那么在找不到 Key 的情况下会得到 ",(0,s.jsx)(n.code,{children:"None"}),"；如果 get 有两个参数，那么在找不到 Key 的情况下，会返回第 2 个参数。"]}),"\n",(0,s.jsx)(n.p,{children:"如果要修改一个已经存在的字典的 Key 对应的 Value，或者要往里面增加新的 Key-Value 对，可以使用以下格式："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"变量名[key] = '新的值'\n"})}),"\n",(0,s.jsx)(n.p,{children:"需要特别注意的是，字典的 Key 的顺序是乱的，所以不能认为先添加到字典里面的数据就排在前面。"}),"\n",(0,s.jsxs)(n.h3,{id:"集合",children:["集合",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#集合",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"集合是使用大括号括起来的各种数据，可以看作没有 Value 的字典。集合里面的元素不能重复。集合也是无序的。"}),"\n",(0,s.jsx)(n.p,{children:"集合最大的应用之一就是去重。例如，把一个带有重复元素的列表先转换为集合，再转换回列表，那么重复元素就只会保留一个。"}),"\n",(0,s.jsxs)(n.p,{children:["把列表转换为集合需要使用 ",(0,s.jsx)(n.code,{children:"set()"})," 函数，把集合转换为列表使用 ",(0,s.jsx)(n.code,{children:"list()"})," 函数："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"duplicated_list = [3, 1, 3, 2, 4, 6, 6, 7, 's', 's', 'a']\r\nunique_list = list(set(duplicated_list)) \r\nprint(unique_list) # [1, 2, 3, 4, 's', 6, 7, 'a']\n"})}),"\n",(0,s.jsx)(n.p,{children:"由于集合与字典一样，里面的值没有顺序，因此使用集合来去重是有代价的，代价就是原来列表的顺序也会被改变。"})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}let h=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["docs%2Fpython%2F01-data-structure-and-control-structure.md"]={toc:[{text:"字符串、列表和元组",id:"字符串列表和元组",depth:2},{text:"元组",id:"元组",depth:3},{text:"数据读取",id:"数据读取",depth:2},{text:"指定下标",id:"指定下标",depth:3},{text:"切片",id:"切片",depth:3},{text:"拼接与修改",id:"拼接与修改",depth:3},{text:"字典与集合",id:"字典与集合",depth:2},{text:"字典",id:"字典",depth:3},{text:"集合",id:"集合",depth:3}],title:"数据结构和控制结构",frontmatter:{}}}}]);