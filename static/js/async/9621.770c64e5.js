"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["9621"],{47730:function(n,e,s){s.r(e),s.d(e,{default:function(){return o}});var r=s(85893),c=s(50065),a=s(95895);function i(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",pre:"pre",ul:"ul",li:"li",strong:"strong"},(0,c.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"异步函数",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#异步函数",children:"#"}),"异步函数"]}),"\n",(0,r.jsx)(a.Z,{defaultLocale:"zh-CN"}),"\n",(0,r.jsxs)(e.h2,{id:"async-函数",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#async-函数",children:"#"}),"async 函数"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"async"})," 函数的返回值为 Promise 对象，且该对象的结果由 ",(0,r.jsx)(e.code,{children:"async"})," 函数执行的结果来决定"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",meta:"",children:"async function fn1() {\r\n  return 1;\r\n}\r\nconsole.log(fn1()); // 得到一个 Promise 对象, value 为 1\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",meta:"",children:"async function fn2() {\r\n  throw 2;\r\n}\r\nconsole.log(fn2()); // 得到一个 Promise 对象, value 为 2\n"})}),"\n",(0,r.jsxs)(e.p,{children:["其余的，例如：",(0,r.jsx)(e.code,{children:"return Promise.resolve(3);"})," 或者 ",(0,r.jsx)(e.code,{children:"return Promise.reject(4);"})," 等看结果就可以直接决定。"]}),"\n",(0,r.jsxs)(e.h2,{id:"await-表达式",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#await-表达式",children:"#"}),"await 表达式"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"await"})," 右侧的表达式一般为 Promise 对象，但也可以是其他值"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["如果表达式是 Promise 对象，",(0,r.jsx)(e.code,{children:"await"})," 返回的是 Promise 成功的值"]}),"\n",(0,r.jsxs)(e.li,{children:["如果表达式是其他值，直接将此值作为 ",(0,r.jsx)(e.code,{children:"await"})," 的返回值"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"注意"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"await"})," 必须写在 ",(0,r.jsx)(e.code,{children:"async"})," 函数中，但 ",(0,r.jsx)(e.code,{children:"async"})," 中可以没有 ",(0,r.jsx)(e.code,{children:"await"})]}),"\n",(0,r.jsxs)(e.li,{children:["如果 ",(0,r.jsx)(e.code,{children:"await"})," 的 Promise 对象失败了，就会抛出异常，需要通过 try ... catch 来捕获处理，且捕获到的异常为 Promise 对象失败的值"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",meta:"",children:"async function fn1() {\r\n  throw 2;\r\n}\r\nasync function fn2() {\r\n  try {\r\n    const value = await fn1();   \r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfn2(); // 2\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"asyncawait-和promise-的关系",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#asyncawait-和promise-的关系",children:"#"}),(0,r.jsx)(e.code,{children:"async/await"})," 和",(0,r.jsx)(e.code,{children:"Promise"})," 的关系"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"async/await"})," 是消灭异步回调的终极武器，但是和 Promise 并不互斥，通常会将 ",(0,r.jsx)(e.code,{children:"async/await"})," 和 ",(0,r.jsx)(e.code,{children:"Promise"})," 结合使用。"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["执行 ",(0,r.jsx)(e.code,{children:"async"})," 函数，返回的是 ",(0,r.jsx)(e.code,{children:"Promise"})," 对象"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"await"})," 相当于 ",(0,r.jsx)(e.code,{children:"Promise"})," 的 ",(0,r.jsx)(e.code,{children:"then"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"try ... catch"})," 可捕获异常，代替了 ",(0,r.jsx)(e.code,{children:"Promise"})," 的 ",(0,r.jsx)(e.code,{children:"catch"})]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["不过，js 还是单线程的，还是有一部，还是得基于 ",(0,r.jsx)(e.code,{children:"event loop"}),"，",(0,r.jsx)(e.code,{children:"async/await"})," 只是一个语法糖。"]}),"\n",(0,r.jsxs)(e.h2,{id:"asyncawait-的执行顺序",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#asyncawait-的执行顺序",children:"#"}),(0,r.jsx)(e.code,{children:"async/await"})," 的执行顺序"]}),"\n",(0,r.jsx)(e.p,{children:"看一道题目："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",meta:"",children:"async function async1() {\r\n  console.log('async1 start');\r\n  await async2();\r\n  console.log('async1 end');\r\n}\r\n\r\nasync function async2() {\r\n  console.log('async2');\r\n}\r\n\r\nconsole.log('script start');\r\nasync1();\r\nconsole.log('script end');\r\n\r\n// script start\r\n// async1 start\r\n// async2\r\n// script end\r\n// async1 end\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"await"})," 后面，都可以看作是 callback 里的内容"]}),"，类似："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",meta:"",children:"Promise.resolve().then(() => {\r\n  console.log('async1 end');\r\n});\n"})}),"\n",(0,r.jsx)(e.p,{children:"这道题目再增加一点难度："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",meta:"",children:"async function async1() {\r\n  console.log('async1 start');\r\n  await async2();\r\n  console.log('async1 end');\r\n  await async3();\r\n  console.log('----------');\r\n}\r\n\r\nasync function async2() {\r\n  console.log('async2');\r\n}\r\n\r\nasync function async3() {\r\n  console.log('async3');\r\n}\r\n\r\nconsole.log('script start');\r\nasync1();\r\nconsole.log('script end');\r\n\r\n// script start\r\n// async1 start\r\n// async2\r\n// script end\r\n// async1 end\r\n// async3\r\n// ----------\n"})}),"\n",(0,r.jsx)(e.p,{children:"最后一道题目："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",meta:"",children:"async function async1() {\r\n  console.log('async1 start');\r\n  await async2();\r\n  console.log('async1 end');\r\n}\r\n\r\nasync function async2() {\r\n  console.log('async2');\r\n}\r\nconsole.log('script start');\r\n\r\nsetTimeout(function () {\r\n  console.log('setTimeout');\r\n}, 0);\r\n\r\nasync1();\r\n\r\nnew Promise(function (resolve) {\r\n  console.log('promise1');\r\n  resolve();\r\n}).then(function () {\r\n  console.log('promise2');\r\n});\r\n\r\nconsole.log('script end');\r\n\r\n// script start\r\n// async1 start\r\n// async2\r\n// promise1\r\n// script end\r\n// async1 end\r\n// promise2\r\n// setTimeout\n"})})]})}function t(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,c.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(i,n)})):i(n)}let o=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["docs%2Fjs%2F11-%E6%9C%9F%E7%BA%A6%E4%B8%8E%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%2F03-%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0.md"]={toc:[{id:"async-函数",text:"async 函数",depth:2},{id:"await-表达式",text:"await 表达式",depth:2},{id:"asyncawait-和promise-的关系",text:"`async/await` 和`Promise` 的关系",depth:2},{id:"asyncawait-的执行顺序",text:"`async/await` 的执行顺序",depth:2}],title:"异步函数",frontmatter:{}}},95895:function(n,e,s){s.d(e,{Z:function(){return o}});var r=s(85893),c=s(67294),a=s(45687);s(6175);let i={"zh-CN":n=>`预计阅读时间: ${n.minutes>=1?`${Math.ceil(n.minutes)} 分钟`:"小于 1 分钟"}`,"en-US":n=>`Estimated reading time: ${n.minutes>=1?`${Math.ceil(n.minutes)} minutes`:"less than 1 minute"}`};function t(n,e,s){let r=Object.keys(i).includes(e)?e:s;return i[r](n)}let o=n=>{let{defaultLocale:e="en-US"}=n,s=(0,a.Vi)().page.readingTimeData,i=(0,a.Jr)(),o=(0,a.e7)(),[l,d]=(0,c.useState)(t(s,i,e));return(0,c.useEffect)(()=>{d(t(s,i,e))},[i,s]),(0,r.jsx)("span",{"data-dark":String(o),className:"rp-reading-time",children:l})}}}]);