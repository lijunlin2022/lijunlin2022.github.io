"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["1678"],{8763:function(n,r,e){e.r(r),e.d(r,{default:function(){return a}});var t=e(5893),i=e(65);function s(n){let r=Object.assign({h1:"h1",a:"a",pre:"pre",code:"code",p:"p",ul:"ul",li:"li",h2:"h2"},(0,i.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r.h1,{id:"函数",children:["函数",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#函数",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"func func_name ([parameter_list]) [return_types] {\r\n  函数体\r\n}\n"})}),"\n",(0,t.jsx)(r.p,{children:"函数定义解析："}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"func：函数声明"}),"\n",(0,t.jsx)(r.li,{children:"function_name：函数名称"}),"\n",(0,t.jsx)(r.li,{children:"parameter_list：参数列表，数列表指定的是参数类型、顺序、及参数个数。函数也可以不包含参数。"}),"\n",(0,t.jsx)(r.li,{children:"return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。"}),"\n",(0,t.jsx)(r.li,{children:"函数体：函数定义的代码集合。"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"go 语言的函数参数传递方式是值传递。这意味着当你将一个变量传递给函数时，函数会接收到这个变量的一个副本，而不是原始变量的引用。因此，如果你在函数内部改变了这个副本的值，原始变量的值不会改变。"}),"\n",(0,t.jsx)(r.p,{children:"然而，go 语言的切片（slice）、映射（map）和通道（channel）等类型的变量，虽然在传递给函数时也是值传递，但是它们的值其实是一个指向底层数据结构的指针。因此，如果你在函数内部改变了这些类型的变量，那么原始变量所指向的底层数据结构的值也会改变。这种情况下，虽然严格来说仍然是值传递，但是它的行为看起来更像是引用传递。"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"func max(num1, num2 int) int {\r\n  if num1 > num2 {\r\n    return num1\r\n  } else {\r\n    return num2\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'// 有多个返回值的函数\r\nfunc swap(str1 string, str2 string) (string, string) {\r\n  return str2, str1\r\n}\r\n\r\nfunc main() {\r\n  str1 := "hello"\r\n  str2 := "world"\r\n  newStr1, newStr2 := swap(str1, str2)\r\n  fmt.Println(newStr1, newStr2)\r\n}\n'})}),"\n",(0,t.jsxs)(r.h2,{id:"函数作为参数",children:["函数作为参数",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#函数作为参数",children:"#"})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:"func getSquareRoot(num float64) float64 {\r\n  return math.Sqrt(num)\r\n}\r\n\r\nfunc main() {\r\n  fmt.Println(getSquareRoot(9))\r\n}\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"函数作为返回值",children:["函数作为返回值",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#函数作为返回值",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"函数作为返回值时，有一种特殊情况称之为「闭包」。如果一个函数返回另一个函数，并且这个返回的函数引用了外部函数的变量，那么这个函数就可以被认为是一个闭包。"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"func getSequence() func() int {\r\n  num := 0\r\n  return func() int {\r\n    num += 1\r\n    return num\r\n  }\r\n}\r\n\r\nfunc main() {\r\n  firstFunc := getSequence()\r\n\r\n  fmt.Println(firstFunc()) // 1\r\n  fmt.Println(firstFunc()) // 2\r\n  fmt.Println(firstFunc()) // 3\r\n\r\n  secondFunc := getSequence()\r\n\r\n  fmt.Println(secondFunc()) // 1\r\n  fmt.Println(secondFunc()) // 2\r\n}\n"})}),"\n",(0,t.jsxs)(r.h2,{id:"匿名函数",children:["匿名函数",(0,t.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#匿名函数",children:"#"})]}),"\n",(0,t.jsx)(r.p,{children:"go 的匿名函数类似于 js 的箭头函数，可以直接在函数体里定义，并赋值给一个变量。"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func main() {\r\n  add := func(a, b int) int {\r\n    return a + b\r\n  }\r\n\r\n  diff := func(a, b int) int {\r\n    return a - b\r\n  }\r\n\r\n  mul := func(a, b int) int {\r\n    return a * b\r\n  }\r\n\r\n  div := func(a, b float64) float64 {\r\n    return a / b\r\n  }\r\n\r\n  fmt.Printf("1 + 2 = %d\\n", add(1, 2))\r\n  fmt.Printf("1 - 2 = %d\\n", diff(1, 2))\r\n  fmt.Printf("1 * 2 = %d\\n", mul(1, 2))\r\n  fmt.Printf("1 / 2 = %f\\n", div(1, 2))\r\n}\n'})})]})}function c(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),n.components);return r?(0,t.jsx)(r,{...n,children:(0,t.jsx)(s,{...n})}):s(n)}let a=c;c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["docs%2Fgo%2F05-func.md"]={toc:[{text:"函数作为参数",id:"函数作为参数",depth:2},{text:"函数作为返回值",id:"函数作为返回值",depth:2},{text:"匿名函数",id:"匿名函数",depth:2}],title:"函数",frontmatter:{}}}}]);