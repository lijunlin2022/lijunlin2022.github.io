"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["7493"],{3809:function(e,n,r){r.r(n),r.d(n,{default:function(){return h}});var d=r(5893),c=r(65);function s(e){let n=Object.assign({p:"p",code:"code",h2:"h2",a:"a",pre:"pre",blockquote:"blockquote",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ul:"ul",li:"li",h3:"h3"},(0,c.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.p,{children:["本节介绍了 ",(0,d.jsx)(n.code,{children:"cmp"})," 的基本用法，以及 ",(0,d.jsx)(n.code,{children:"jz/je"})," 和 ",(0,d.jsx)(n.code,{children:"jnz/jne"})," 两个条件跳转指令，完成了判断用户输入的代码并封装了一个之后会经常用到的清屏函数 ",(0,d.jsx)(n.code,{children:"ClearScreen()"})]}),"\n",(0,d.jsxs)(n.h2,{id:"cmp-基本用法",children:["cmp 基本用法",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#cmp-基本用法",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"cmp 可以用来比较源操作数和目的操作数"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{children:"cmp 目的操作数, 源操作数\n"})}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"cmp 指令在源操作数和目的操作数之间执行隐含的减法操作"}),"\n",(0,d.jsxs)(n.p,{children:["在比较两个",(0,d.jsx)(n.strong,{children:"无符号操作数"}),"的时候，会影响两个 CPU 标志位—— 零标志位 ZF 和 进位标志位 CF"]}),"\n",(0,d.jsxs)(n.table,{children:["\n",(0,d.jsxs)(n.thead,{children:["\n",(0,d.jsxs)(n.tr,{children:["\n",(0,d.jsx)(n.th,{children:"CMP 的结果"}),"\n",(0,d.jsx)(n.th,{children:"ZF"}),"\n",(0,d.jsx)(n.th,{children:"CF"}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.tbody,{children:["\n",(0,d.jsxs)(n.tr,{children:["\n",(0,d.jsx)(n.td,{children:"目的 < 源"}),"\n",(0,d.jsx)(n.td,{children:"0"}),"\n",(0,d.jsx)(n.td,{children:"1"}),"\n"]}),"\n",(0,d.jsxs)(n.tr,{children:["\n",(0,d.jsx)(n.td,{children:"目的 > 源"}),"\n",(0,d.jsx)(n.td,{children:"0"}),"\n",(0,d.jsx)(n.td,{children:"0"}),"\n"]}),"\n",(0,d.jsxs)(n.tr,{children:["\n",(0,d.jsx)(n.td,{children:"目的 = 源"}),"\n",(0,d.jsx)(n.td,{children:"1"}),"\n",(0,d.jsx)(n.td,{children:"0"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"—— 摘自 《Intel 汇编语言程序设计（第 5 版）》144 页"}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"jzje-和-jnzjne",children:["jz/je 和 jnz/jne",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#jzje-和-jnzjne",children:"#"})]}),"\n",(0,d.jsx)(n.p,{children:"于是我们可以通过判断这些标志位来进行条件跳转，下面是两个命令"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["jz —— 如果 ",(0,d.jsx)(n.code,{children:"源操作数 - 目的操作数 = 0"}),"，即 ZF = 1 ，则进行跳转"]}),"\n",(0,d.jsxs)(n.li,{children:["jnz —— 如果 ",(0,d.jsx)(n.code,{children:"源操作数 - 目的操作数 ≠ 0"})," ，即 ZF = 0，则进行跳转"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["值得注意的是，命令 ",(0,d.jsx)(n.code,{children:"jz"})," 和 ",(0,d.jsx)(n.code,{children:"je"})," 是等价的，而 ",(0,d.jsx)(n.code,{children:"jnz"})," 和 ",(0,d.jsx)(n.code,{children:"jne"})," 是等价的"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"对于实现同一功能但指令助记符有两种形式的情况，在程序中究竟选用哪一种，视习惯或用途而定。例如，对于指令 JZ/JE LABEL，当比较两数相等转义时，常使用 JE，当比较某数为 0 转移时，常使用 JZ"}),"\n",(0,d.jsx)(n.p,{children:"—— 摘自《汇编语言与接口技术（李元章）》104 页"}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"判断-scanf-的输入类型",children:["判断 scanf 的输入类型",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#判断-scanf-的输入类型",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["了解 cmp 和 je/jne 指令之后，我们现在可以判断 scanf 的输入了，在 ",(0,d.jsx)(n.code,{children:"snake.cpp"})," 中，判断用户输入的代码放到了函数 ",(0,d.jsx)(n.code,{children:"enterGame()"})," 中，要看它翻译的汇编结果，你可以查看 ",(0,d.jsx)(n.code,{children:"snake.asm"})," 的函数 ",(0,d.jsx)(n.code,{children:"enterGame()"})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:'void enterGame() {\r\n	int selection;\r\n	const char* paramater = "%d";\r\n	__asm {\r\n	enter_game:\r\n		call showMainMenu\r\n\r\n		// 获取用户选择\r\n		lea eax, dword ptr ds : [selection]\r\n		push eax\r\n		mov ecx, dword ptr ds : [paramater]\r\n		push ecx\r\n		call scanf\r\n		add esp, 8\r\n\r\n		// 判断用户的选择\r\n		mov eax, dword ptr ds : [selection]\r\n		cmp eax, 1\r\n		je start_game\r\n		cmp eax, 2\r\n		je end_game\r\n\r\n		// 处理非法选择\r\n		call handleIllegalSelection\r\n		jmp enter_game\r\n\r\n	start_game :\r\n		call startGame\r\n\r\n	end_game :\r\n		call endGame\r\n	}\r\n}\n'})}),"\n",(0,d.jsxs)(n.h2,{id:"延时和清屏",children:["延时和清屏",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#延时和清屏",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["在上述代码中，处理非法输入时会调用 ",(0,d.jsx)(n.code,{children:"handleIllegalSelection()"})," 函数，而在 ",(0,d.jsx)(n.code,{children:"handleIllegalSelection()"})," 中调用了 ",(0,d.jsx)(n.code,{children:"Sleep()"})," 函数和 ",(0,d.jsx)(n.code,{children:"clearScreen()"})," 函数"]}),"\n",(0,d.jsxs)(n.h3,{id:"延时函数",children:["延时函数",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#延时函数",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["延时调用的是 Windows 提供的函数 ",(0,d.jsx)(n.code,{children:"Sleep()"})," ，它的头文件是 ",(0,d.jsx)(n.code,{children:"windows.h"})," ，参数以毫秒为单位"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:"push 2000\r\ncall Sleep\n"})}),"\n",(0,d.jsx)(n.p,{children:"上述代码的意思就是延时 2s"}),"\n",(0,d.jsxs)(n.p,{children:["值得注意的是，Windows 的函数",(0,d.jsx)(n.strong,{children:"自己会平衡堆栈"}),"，所以不需要像我们调用 scanf 或者 printf 那样还要加上 ",(0,d.jsx)(n.code,{children:"add esp,4"})]}),"\n",(0,d.jsxs)(n.h3,{id:"清屏函数",children:["清屏函数",(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#清屏函数",children:"#"})]}),"\n",(0,d.jsxs)(n.p,{children:["清屏函数调用的是函数 ",(0,d.jsx)(n.code,{children:"system()"}),"，它的头文件是 ",(0,d.jsx)(n.code,{children:"stdlib.h"})]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:'system("cls");\n'})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"windows.h"})," 中调用了这个函数，因此我们平时可以再 Windows 的命令提示符窗口下直接输入 ",(0,d.jsx)(n.code,{children:"cls"})," 清屏"]}),"\n",(0,d.jsx)(n.p,{children:"现在我们来封装这个函数，把它作为一个工具供以后使用"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-c",children:'void clearScreenUtil() {\r\n	const char* clearScreen = "cls";\r\n	__asm {\r\n		mov eax, dword ptr ds : [clearScreen]\r\n		push eax\r\n		call system\r\n		add esp, 4\r\n	}\r\n}\n'})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,c.ah)(),e.components);return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(s,{...e})}):s(e)}let h=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["docs%2Fbit-life%2Fsnake%2Fcmp-and-jmp.md"]={toc:[{text:"cmp 基本用法",id:"cmp-基本用法",depth:2},{text:"jz/je 和 jnz/jne",id:"jzje-和-jnzjne",depth:2},{text:"判断 scanf 的输入类型",id:"判断-scanf-的输入类型",depth:2},{text:"延时和清屏",id:"延时和清屏",depth:2},{text:"延时函数",id:"延时函数",depth:3},{text:"清屏函数",id:"清屏函数",depth:3}],title:"",frontmatter:{}}}}]);