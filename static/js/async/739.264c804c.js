"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["739"],{3963:function(n,r,e){e.r(r),e.d(r,{default:function(){return c}});var s=e(85893),l=e(50065);function t(n){let r=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",pre:"pre",ol:"ol"},(0,l.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"字符串-string-和-str",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串-string-和-str",children:"#"}),"字符串 String 和 &str"]}),"\n",(0,s.jsxs)(r.p,{children:["Rust 有 ",(0,s.jsx)(r.code,{children:"String"})," 和 ",(0,s.jsx)(r.code,{children:"&str"})," 两种字符串类型，其中，&str 是 String 的切片类型。也就是说，&str 是 String 的一部分。"]}),"\n",(0,s.jsx)(r.p,{children:"String 是可变的（mutable），而 &str 是不可变的（immutable）"}),"\n",(0,s.jsxs)(r.h2,{id:"string-和-str-互相转换",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#string-和-str-互相转换",children:"#"}),"String 和 &str 互相转换"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"String 转 &str"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["我们可以使用 ",(0,s.jsx)(r.code,{children:"&"})," 操作符，将 String 类型转换为 &str 类型。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'let string: String = String::from("Hello World!");\r\nlet str: &str = &string;\r\n\r\nprintln!("{}", str);\n'})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"&str 转 String"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["我们可以使用 ",(0,s.jsx)(r.code,{children:"to_string()"})," 方法将 &str 类型转换为 String 类型。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'let str: &str = "Hello World!";\r\nlet string: String = str.to_string();\r\nprintln!("{}", string);\n'})}),"\n",(0,s.jsxs)(r.h2,{id:"string-和-char-互相转换",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#string-和-char-互相转换",children:"#"}),"String 和 char 互相转换"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"String 转 char"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["我们可以使用 ",(0,s.jsx)(r.code,{children:"chars()"})," 将 String 转换为 char 类型的数组。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'fn main() {\r\n    let s: String = String::from("hello");\r\n    let char_vec: Vec<char> = s.chars().collect();\r\n\r\n    println!("{:?}", char_vec);\r\n}\n'})}),"\n",(0,s.jsxs)(r.p,{children:["如果我们想获得字符串中特定的字符，我们可以往 ",(0,s.jsx)(r.code,{children:"nth()"})," 方法中传入索引。"]}),"\n",(0,s.jsxs)(r.p,{children:["其中，",(0,s.jsx)(r.code,{children:"unwrap_or('\\0')"})," 的作用是，如果 nth() 没有查找到特定索引的字符，会返回一个 None，而使用 unwrap_or('\\0') 时则会提供一个默认值 '\\0'; [^1]"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'fn main() {\r\n    let s: String = String::from("hello");\r\n    let c: char = s.chars().nth(1).unwrap_or(\'\\0\');\r\n\r\n    println!("{}", c);\r\n}\n'})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"char 转 String"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["我们可以使用 ",(0,s.jsx)(r.code,{children:"to_string()"})," 方法，将单个字符转换为字符串。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:"fn main() {\r\n    let c: char = 'a';\r\n    let s: String = c.to_string();\r\n    println!(\"char to string: {}\", s);\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["当出现多个字符时，我们可以将字符一个接一个 ",(0,s.jsx)(r.code,{children:"push()"})," 到字符串中，这样便自动实现了字符到字符串的转换。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:"fn main() {\r\n    let chars: Vec<char> = vec!['h', 'e', 'l', 'l', 'o'];\r\n    let mut s: String = String::new();\r\n\r\n    for c in chars {\r\n      s.push(c);\r\n    }\r\n\r\n    println!(\"concatenated string: {}\", s);\r\n}\n"})}),"\n",(0,s.jsxs)(r.p,{children:["我们也可以先使用 ",(0,s.jsx)(r.code,{children:"collect()"})," 方法，实现字符到字符串的转换。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:"fn main() {\r\n    let chars: Vec<char> = vec!['h', 'e', 'l', 'l', 'o'];\r\n    let s: String = chars.into_iter().collect();\r\n\r\n    println!(\"concatenated string: {}\", s);\r\n}\n"})}),"\n",(0,s.jsxs)(r.h2,{id:"比较-string-是否相等",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#比较-string-是否相等",children:"#"}),"比较 String 是否相等"]}),"\n",(0,s.jsxs)(r.p,{children:["在 Rust 中，我们可以直接使用 ",(0,s.jsx)(r.code,{children:"=="})," 运算符，判断两个字符串是否相等。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'fn main() {\r\n    let s1 = String::from("Hello");\r\n    let s2 = String::from("World");\r\n\r\n    if s1 == s2 {\r\n        println!("s1 and s2 are equal.");\r\n    } else {\r\n        println!("s1 and s2 are not equal.");\r\n    }\r\n}\n'})}),"\n",(0,s.jsxs)(r.h2,{id:"split_whitespace-去除空白符号",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#split_whitespace-去除空白符号",children:"#"}),"split_whitespace() 去除空白符号"]}),"\n",(0,s.jsxs)(r.p,{children:["在 Rust 中，我们可以通过 ",(0,s.jsx)(r.code,{children:"split_whitespace()"})," 去除字符串中的 space，tab 和 newlines 等符号。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'fn main() {\r\n    let s: &str = "  h             el      l       o  ";\r\n    let words: Vec<&str> = s.split_whitespace().collect();\r\n    let result: String = words.join(" ");\r\n    println!("{}", result);\r\n}\n'})}),"\n",(0,s.jsxs)(r.h2,{id:"拼接-str-成为-string",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#拼接-str-成为-string",children:"#"}),"拼接 &str 成为 String"]}),"\n",(0,s.jsx)(r.p,{children:"rust 提供了很多方法来拼接字符串，每一种方法都有特定的使用情况。"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"format!()"}),"，最简单直接的方法"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'fn main() {\r\n    let world: &str = "world";\r\n    let s: String = format!("Hello {}!", world);\r\n    println!("{}", s);\r\n}\n'})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"push_str()"}),"，追加字符串时，更适合使用的方法"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'fn main() {\r\n    let world: &str = "world";\r\n    let mut s: String = String::from("hello ");\r\n    s.push_str(world);\r\n    println!("{}", s);\r\n}\n'})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"concat()"}),"，将字符串数组连接成一个字符串"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'fn main() {\r\n    let strs: Vec<&str> = vec!["talk", " ", "is", " ", "cheap"];\r\n    let s: String = strs.concat();\r\n    println!("{}", s);\r\n}\n'})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"join()"}),"，将字符串数组连接成一个字符串，连接符可以自己设置"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'fn main() {\r\n    let strs: Vec<&str> = vec!["show", "me", "the", "code"];\r\n    let s: String = strs.join(" ");\r\n    println!("{}", s);\r\n}\n'})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"+"}),"，运算符，需要两侧的字符串类型分别为 ",(0,s.jsx)(r.code,{children:"&str"})," 和 ",(0,s.jsx)(r.code,{children:"String"})]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'fn main() {\r\n    let s1: &str = "hello";\r\n    let s2: &str = " world";\r\n    println!("{}", s1.to_string() + s2);\r\n}\n'})}),"\n",(0,s.jsxs)(r.h2,{id:"标准字符串和原始字符串",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#标准字符串和原始字符串",children:"#"}),"标准字符串和原始字符串"]}),"\n",(0,s.jsx)(r.p,{children:"在 Rust 中，字符串字面量（string iteral）有两种表示方式，标准字符串字面量（standard string iteral）和原始字符串字面量（raw string iteral）。"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"标准字符串"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["标准字符串使用 ",(0,s.jsx)(r.code,{children:'""'})," 包含。在标准字符串中，",(0,s.jsx)(r.code,{children:"\\"})," 有特殊含义，用于表示转义字符串。比如 ",(0,s.jsx)(r.code,{children:'"hello\\\\world"'})," 打印后是 ",(0,s.jsx)(r.code,{children:"hello\\world"}),"。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'let s: &str = "hello\\\\world";\r\nprintln!("{}", s);\n'})}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"原始字符串"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["原始字符串使用 ",(0,s.jsx)(r.code,{children:'r#"..."#'})," 格式包含，其中 ",(0,s.jsx)(r.code,{children:"#"})," 可以被替换为任何字符。原始字符串不支持转义字符。比如 ",(0,s.jsx)(r.code,{children:'r#"hello\\\\world"#'})," 打印后是 ",(0,s.jsx)(r.code,{children:"hello\\\\world"}),"。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'let s: &str = r#"hello\\\\world"#;\r\nprintln!("{}", s);\n'})}),"\n",(0,s.jsx)(r.p,{children:"原始字符串可以避免繁琐的反斜杠，让代码更清晰易懂。因此在表示正则表达式、文件路径时，我们通常会选择原始字符串字面量。"}),"\n",(0,s.jsxs)(r.h2,{id:"字符串和所有权",children:[(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#字符串和所有权",children:"#"}),"字符串和所有权"]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Rust 中的每一个值都有一个变量，称为其所有者；"}),"\n",(0,s.jsx)(r.li,{children:"值在任一时刻有且只有一个所有者；"}),"\n",(0,s.jsx)(r.li,{children:"当所有者（变量）离开作用域，这个值将被丢弃。"}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["举例来说：下述代码将会报错，因为变量 ",(0,s.jsx)(r.code,{children:"your_name"})," 离开作用域后，变量就销毁了。"]}),"\n",(0,s.jsxs)(r.p,{children:["如果把 ",(0,s.jsx)(r.code,{children:"print_name_2"})," 和 ",(0,s.jsx)(r.code,{children:"print_name_1"})," 调换位置，则能够正常运行，因为 ",(0,s.jsx)(r.code,{children:"print_name_2"})," 借用了 ",(0,s.jsx)(r.code,{children:"your_name"})," 的所有权，",(0,s.jsx)(r.code,{children:"your_name"})," 变量还存在。"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-rust",meta:"",children:'use std::io::stdin;\r\n\r\nfn what_is_your_name() -> String {\r\n    let mut your_name = String::new();\r\n    stdin().read_line(&mut your_name).expect("Failed to read line");\r\n    your_name = your_name.trim().to_lowercase().to_string();\r\n    your_name\r\n}\r\nfn print_name_1(name: &String) {\r\n    println!("Hello, {}!", name);\r\n}\r\nfn print_name_2(name: String) {\r\n    println!("Hello, {}!", name);\r\n}\r\nfn main() {\r\n    let your_name = what_is_your_name();\r\n    // 正常\r\n    print_name_1(&your_name);\r\n    print_name_2(your_name);\r\n    // 报错\r\n    // print_name_2(your_name);\r\n    // print_name_1(&your_name);\r\n}\n'})})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,l.ah)(),n.components);return r?(0,s.jsx)(r,Object.assign({},n,{children:(0,s.jsx)(t,n)})):t(n)}let c=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["zh%2Fdocs%2Frust%2F02-Rust%20%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5%2F02-string-%26str.md"]={toc:[{id:"string-和-str-互相转换",text:"String 和 &str 互相转换",depth:2},{id:"string-和-char-互相转换",text:"String 和 char 互相转换",depth:2},{id:"比较-string-是否相等",text:"比较 String 是否相等",depth:2},{id:"split_whitespace-去除空白符号",text:"split_whitespace() 去除空白符号",depth:2},{id:"拼接-str-成为-string",text:"拼接 &str 成为 String",depth:2},{id:"标准字符串和原始字符串",text:"标准字符串和原始字符串",depth:2},{id:"字符串和所有权",text:"字符串和所有权",depth:2}],title:"字符串 String 和 &str",frontmatter:{}}}}]);