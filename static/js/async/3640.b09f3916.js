"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["3640"],{5365:function(n,e,r){r.r(e),r.d(e,{default:function(){return o}});var l=r(5893),s=r(65);function c(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",strong:"strong",h3:"h3",pre:"pre",blockquote:"blockquote"},(0,s.ah)(),n.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(e.h1,{id:"string-类型",children:["String 类型",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#string-类型",children:"#"})]}),"\n",(0,l.jsxs)(e.h2,{id:"转换数值",children:["转换数值",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#转换数值",children:"#"})]}),"\n",(0,l.jsxs)(e.p,{children:["有 3 个函数可以将非数值转换为数值，",(0,l.jsx)(e.code,{children:"Number()"}),", ",(0,l.jsx)(e.code,{children:"parseInt()"})," 和 ",(0,l.jsx)(e.code,{children:"parseFloat()"}),"。"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"Number()"})," 是转型函数，可用于任何数据类型"]}),"\n",(0,l.jsx)(e.li,{children:"后两个函数主要用于将字符串转换为数值"}),"\n",(0,l.jsx)(e.li,{children:(0,l.jsx)(e.strong,{children:"对于同样的参数, 这 3 个函数执行的操作也不同"})}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"number-函数",children:[(0,l.jsx)(e.code,{children:"Number()"})," 函数",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#number-函数",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"Number() 函数基于如下规则执行转换："}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"布尔值，true 转换为 1，false 转换为 0"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"数值，直接返回"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"null，返回 0"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"undefined，返回 NaN"}),"\n"]}),"\n",(0,l.jsxs)(e.li,{children:["\n",(0,l.jsx)(e.p,{children:"字符串，应用以下规则："}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"如果字符串包含数值字符，包括数值字符前面带加、减号的情况，则转换为一个十进制数值（忽略前面的 0）"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'// 字符串包含整数\r\nconsole.log(Number("1"));      // 1\r\nconsole.log(Number("+123"));   // 123\r\nconsole.log(Number("-456"));   // -456\r\nconsole.log(Number("0789"));   // 789\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:'如果字符串包含有效的浮点值格式为 "1.1"，则会转换为相应的浮点数（忽略前面的 0）'}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'// 字符串包含浮点数\r\nconsole.log(Number("1.1"));    // 1.1\r\nconsole.log(Number("+0.123")); // 0.123\r\nconsole.log(Number("-0.456")); // -0.456\r\nconsole.log(Number("00.789")); // 0.789\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"如果字符串包含有效的十六进制，则会转换为与十六进制数值对应的十进制数值"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'// 字符串十六进制整数\r\nconsole.log(Number("0xf"));    // 15\r\nconsole.log(Number("+0xf"));   // NaN\r\nconsole.log(Number("-0xf"));   // NaN\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"如果是空字符串以及空白字符串"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'console.log(Number(""));       // 0\r\nconsole.log(Number(" "));      // 0\r\nconsole.log(Number("12blue")); // NaN\n'})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"如果字符串包含除上述情况之上其他字符串，则返回 NaN"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"parseint-函数",children:["parseInt() 函数",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#parseint-函数",children:"#"})]}),"\n",(0,l.jsxs)(e.p,{children:["考虑了用 ",(0,l.jsx)(e.code,{children:"Number()"})," 函数转换字符串时相对复杂且有点反常规，通常再需要得到整数时可以有限使用 ",(0,l.jsx)(e.code,{children:"parseInt()"})," 函数"]}),"\n",(0,l.jsx)(e.p,{children:"下面是三条与 Number 不一样的规则："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'console.log(parseInt("1234blue"));  // 1234\r\nconsole.log(parseInt(""));          // NaN\r\nconsole.log(parseInt("22.5"));      // 22\n'})}),"\n",(0,l.jsx)(e.p,{children:"而 parseInt() 中可以有第二个参数：第二个参数代表进制："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'console.log(parseInt("10", 2));  // 2\r\nconsole.log(parseInt("10", 8));  // 8\r\nconsole.log(parseInt("10", 10)); // 10\r\nconsole.log(parseInt("10", 16)); // 16\n'})}),"\n",(0,l.jsxs)(e.h3,{id:"parsefloat-函数",children:["parseFloat() 函数",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#parsefloat-函数",children:"#"})]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"16 进制数值始终会返回 0"}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'console.log(parseInt("1234blue"));  // 1234\r\nconsole.log(parseInt("0xA"));       // 0\r\nconsole.log(parseInt("22.5"));      // 22.5\r\nconsole.log(parseInt("22.34.5"));   // 22.34\r\nconsole.log(parseInt("0908.5"));    // 908.5\r\nconsole.log(parseInt("3.125e7"));   // 31250000 \n'})}),"\n",(0,l.jsxs)(e.h2,{id:"转换字符串",children:["转换字符串",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#转换字符串",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"有 3 种方法可以将非字符串转换为字符串"}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"toString()"})," 函数"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"String()"})," 函数"]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"+"})," 操作符"]}),"\n"]}),"\n",(0,l.jsxs)(e.h3,{id:"tostring-方法",children:[(0,l.jsx)(e.code,{children:"toString()"})," 方法",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#tostring-方法",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"数值，布尔值，对象和字符串都有 toString() 方法，null 的 undefined 没有："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'const num = 100;\r\nconst flag = true;\r\nconst obj = {\r\n    A: 1,\r\n    B: ["a", "b", "c"]\r\n};\r\nconst str = "Hello World!";\r\n\r\n// 下方的 "" 仅代表它打印出来的是字符串, 实际打印没有 ""\r\nconsole.log(num.toString());    // "100"\r\nconsole.log(flag.toString());   // "true"\r\nconsole.log(obj.toString());    // "[object Object]"\r\nconsole.log(str.toString());    // "Hello World!"\n'})}),"\n",(0,l.jsx)(e.p,{children:"多数情况下，toString() 不接受任何参数，但在对数值调用时可以接收一个底数参数："}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'let num = 10;\r\nconsole.log(num.toString());    // "10"\r\nconsole.log(num.toString(2));   // "1010"\r\nconsole.log(num.toString(8));   // "12"\r\nconsole.log(num.toString(10));  // "10"\r\nconsole.log(num.toString(16));  // "a"\n'})}),"\n",(0,l.jsxs)(e.h3,{id:"string-方法",children:[(0,l.jsx)(e.code,{children:"String()"})," 方法",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#string-方法",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"String() 方法遵循如下规则："}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"如果值有 toString() 方法，则调用该方法（不传参数）并返回结果"}),"\n",(0,l.jsx)(e.li,{children:'如果值是 null，返回 ”null"'}),"\n",(0,l.jsx)(e.li,{children:'如果值是 undefined，返回 “undefined"'}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'const v1 = null;\r\nlet v2 = undefined;\r\n\r\nconsole.log(String(v1));  // "null"\r\nconsole.log(String(v2));  // "undefined"\n'})}),"\n",(0,l.jsxs)(e.h3,{id:"加法运算符",children:["加法运算符",(0,l.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#加法运算符",children:"#"})]}),"\n",(0,l.jsx)(e.p,{children:"执行加法运算时，只要有一个是字符串，就要运用如下规则："}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"如果两个操作符都是字符串，则第二个字符串拼接到第一个字符串后面"}),"\n",(0,l.jsxs)(e.li,{children:["如果只有一个操作数是字符串，则将另一个操作数转换为字符串，再进行拼接","\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsx)(e.li,{children:"有 toString() 方法就用 toString() 方法转换"}),"\n",(0,l.jsx)(e.li,{children:"没有 toString() 方法就用 String() 方法转换"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-javascript",children:'console.log(5 + 5);           // 10\r\nconsole.log(5 + "5");         // "55"\r\nconsole.log("5" + null);      // "5null"\r\nconsole.log(undefined + "5"); // "undefined5"\r\n\r\nconst obj = {\r\n  A: 1,\r\n  B: [1, 2, 3]\r\n};\r\nconsole.log(obj + "5");        // "[object Object]5"\r\n\r\nlet msg = "The sum of 5 and 10 is " + 5 + 10;\r\nconsole.log(msg); // "the sum of 5 and 10 is 510"\n'})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsx)(e.p,{children:'用加号操作符给一个值加上一个空字符串 "" 可以将其转换为字符串'}),"\n"]})]})}function i(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(c,{...n})}):c(n)}let o=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["docs%2Fjs%2F03-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%2F04-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F06-String.md"]={toc:[{text:"转换数值",id:"转换数值",depth:2},{text:"`Number()` 函数",id:"number-函数",depth:3},{text:"parseInt() 函数",id:"parseint-函数",depth:3},{text:"parseFloat() 函数",id:"parsefloat-函数",depth:3},{text:"转换字符串",id:"转换字符串",depth:2},{text:"`toString()` 方法",id:"tostring-方法",depth:3},{text:"`String()` 方法",id:"string-方法",depth:3},{text:"加法运算符",id:"加法运算符",depth:3}],title:"String 类型",frontmatter:{}}}}]);