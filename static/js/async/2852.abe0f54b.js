"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["2852"],{68748:function(e,n,r){r.r(n),r.d(n,{default:function(){return t}});var a=r(85893),s=r(50065),d=r(95895);function l(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ol:"ol",li:"li",h2:"h2",pre:"pre",code:"code",h3:"h3",ul:"ul",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,s.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"ajax",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ajax",children:"#"}),"ajax"]}),"\n",(0,a.jsx)(d.Z,{defaultLocale:"zh-CN"}),"\n",(0,a.jsx)(n.p,{children:"Ajax 是浏览器提供的一套方法,可以实现页面无刷新更新数据,提高用户浏览网站应用的体验。"}),"\n",(0,a.jsx)(n.p,{children:"Ajax 的应用场景举例:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"页面上拉加载更多数据"}),"\n",(0,a.jsx)(n.li,{children:"列表数据无刷新分页"}),"\n",(0,a.jsx)(n.li,{children:"表单项离开焦点数据验证"}),"\n",(0,a.jsx)(n.li,{children:"搜索框提示文字下拉列表"}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"ajax的实现步骤",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ajax的实现步骤",children:"#"}),"Ajax的实现步骤"]}),"\n",(0,a.jsx)(n.p,{children:"1.创建Ajax对象"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:"var xhr = new XMLHttpRequest()\n"})}),"\n",(0,a.jsx)(n.p,{children:"2.告诉 Ajax 请求地址以及请求方式"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:'xhr.open("get", "http://www.example.com")\n'})}),"\n",(0,a.jsx)(n.p,{children:"3.发送请求"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:"xhr.send()\n"})}),"\n",(0,a.jsx)(n.p,{children:"4.获取服务器端给与客户端的响应数据"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:"xhr.onload = function() {\r\n  console.log(xhr.responseText)\r\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"在真实的项目中,服务器端大多数情况下会以 JSON 对象作为响应数据的格式。当客户端拿到响应数据时\r\n要将 JSON 数据转变为对象"}),"\n",(0,a.jsx)(n.p,{children:"于是代码可能为:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:"xhr.onload = function() {\r\n  var responseText = JSON.parse(xhr.responseText)\r\n  var str = `<h2>${responseText}</h2>`\r\n  document.body.innerHTML = str\r\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"ajax-请求参数传递",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ajax-请求参数传递",children:"#"}),"Ajax 请求参数传递"]}),"\n",(0,a.jsxs)(n.h3,{id:"get-请求方式",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#get-请求方式",children:"#"}),"GET 请求方式"]}),"\n",(0,a.jsx)(n.p,{children:"GET 请求方式, 需要在路径后面拼接参数, 类似"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{meta:"",children:"http://www.example.com?name=zhangsan&age=20\n"})}),"\n",(0,a.jsx)(n.p,{children:"因此一般会创建一个 params 作为拼接的请求参数"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:'var params = "username=" + nameValue +"&age=" + ageValue\r\nxhr.open("get", "http://localhost:3000/get?" + params)\r\nxhr.send()\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"post-请求方式",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#post-请求方式",children:"#"}),"POST 请求方式"]}),"\n",(0,a.jsx)(n.p,{children:"POST 请求参数的格式有两种"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"application/x-www-form-urlencoded"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{meta:"",children:"name=zhangsan&age=20\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"application/json"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",meta:"",children:'{ "name": "zhangsan", "age": 20 }\n'})}),"\n",(0,a.jsx)(n.p,{children:"因此, POST 请求方式有两个注意点"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["POST 请求方式需要设置 ",(0,a.jsx)(n.code,{children:"header"})]}),"\n",(0,a.jsxs)(n.li,{children:["POST 请求方式的 ",(0,a.jsx)(n.code,{children:"send()"})," 有参数"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"下面分别举例看看 POST 两种请求方式的代码:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:'//  application/x-www-form-urlencoded\r\nvar xhr = new XMLHttpRequest()\r\nvar nameValue = username.vaule\r\nvar ageValue = age.value\r\nvar params = "username=" + nameValue + "&age=" + ageValue\r\nxhr.open("post", "http://localhost:3000/post")\r\n\r\nxhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded")\r\nxhr.send(params)\r\n\r\nxhr.onload = function() {\r\n  console.log(JSON.parse(xhr.responseText))\r\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:'// application/json\r\nvar xhr = new XMLHttpRequest()\r\nvar nameValue = username.vaule\r\nvar ageValue = age.value\r\nxhr.open("post", "http://localhost:3000/post")\r\n\r\nxhr.setRequestHeader("Content-Type", "application/json")\r\nxhr.send(JSON.stringify({name: nameValue, age: ageValue}))\r\n\r\nxhr.onload = function() {\r\n  console.log(JSON.parse(xhr.responseText))\r\n}\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"ajax-获取服务端的响应",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ajax-获取服务端的响应",children:"#"}),"Ajax 获取服务端的响应"]}),"\n",(0,a.jsx)(n.p,{children:"之前我们已经用过 xhr 的 onload 事件来判定服务端已经响应, 其实还有另外一种方法, 用 xhr 的 onreadystatechange 事件来判定"}),"\n",(0,a.jsxs)(n.p,{children:["在创建 ajax 对象,配置 ajax 对象, 发送请求, 以及接收完服务器端响应数据, 这个过程中的毎一个步骤都会对应一个数值, 这个数值就是 ",(0,a.jsx)(n.code,{children:"ajax 状态码"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["0: 请求未初始化 (还没有调用 ",(0,a.jsx)(n.code,{children:"open()"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:["1: 请求已经建立,但是还没有发送 (还没殳有调用 ",(0,a.jsx)(n.code,{children:"send()"}),")"]}),"\n",(0,a.jsx)(n.li,{children:"2: 请求已经发送"}),"\n",(0,a.jsx)(n.li,{children:"3: 请求正在处理中, 通常响应中已经有部分数据可以用了"}),"\n",(0,a.jsx)(n.li,{children:"4: 响应已经完成, 可以获取并使用服务器的响应了"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:"xhr.readyState // 获取 Ajax 状态码\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"onreadystatechange"})," 事件: 当Ajax状态码发生变化时将自动触发该事件"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:'var xhr = new XMLHttpRequest()\r\n\r\n// 已经创建了 ajax 对象但是还没有对 ajax 对象进行配置\r\nconsole.log(xhr.readyState) // 0\r\n\r\nxhr.open("get", "http://localhost:3000/readystate")\r\n\r\n// 请求已经建立, 但是还没有发送\r\nconsole.log(xhr.readyState) // 1\r\n\r\nxhr.onreadystatechange = function() {\r\n  // 2 请求已经发送了\r\n  // 3 已经接收到服务器端的部分数据了\r\n  // 4 服务器端的响应数据已经接收完成\r\n  console.log(xhr.readyState)\r\n\r\n  if (xhr.readyState === 4) {\r\n    console.log(xhr.responseText)\r\n  }\r\n}\r\n\r\nxhr.send();\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"onload-和onreadystatechange-对比",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#onload-和onreadystatechange-对比",children:"#"}),(0,a.jsx)(n.code,{children:"onload"})," 和",(0,a.jsx)(n.code,{children:"onreadystatechange"})," 对比"]}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"区别描述"}),(0,a.jsx)(n.th,{children:"onload"}),(0,a.jsx)(n.th,{children:"onreadystatechange"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"是否兼容 IE 低版本"}),(0,a.jsx)(n.td,{children:"不兼容"}),(0,a.jsx)(n.td,{children:"兼容"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"是否需要判断 Ajax 状态码"}),(0,a.jsx)(n.td,{children:"不需要"}),(0,a.jsx)(n.td,{children:"需要"})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:"被调用次数"}),(0,a.jsx)(n.td,{children:"一次"}),(0,a.jsx)(n.td,{children:"多次"})]})]})]}),"\n",(0,a.jsxs)(n.h2,{id:"ajax-状态码和-http-状态码的区别",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ajax-状态码和-http-状态码的区别",children:"#"}),"Ajax 状态码和 HTTP 状态码的区别"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Ajax 状态码: 表示 Ajax 请求的过程状态, 是 ajax 对象返回的"}),"\n",(0,a.jsx)(n.li,{children:"Http状态码: 表示请求的处理结果, 是服务器端返回的"}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"ajax-错误处理",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ajax-错误处理",children:"#"}),"Ajax 错误处理"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"网络畅通, 服务器端能接收到求, 但服务器端返回的结果不是预期结果"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"用 xhr.status 获取 http 状态码, 分别进行处理"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",meta:"",children:'xhr.onload = function() {\r\n  if (xhr.status === 400) {\r\n    alert("请求出错")\r\n  }\r\n}\n'})}),"\n",(0,a.jsxs)(n.ol,{start:"2",children:["\n",(0,a.jsx)(n.li,{children:"网络畅通, 服务器端殳有接收到请求, 返回 404 状态码"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"检查请求地址是否错误"}),"\n",(0,a.jsxs)(n.ol,{start:"3",children:["\n",(0,a.jsx)(n.li,{children:"网络畅通, 服努器端能接收到求, 脶务器端返回 500 状态码"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"服务器端错误, 找后端程序员进行沟通"}),"\n",(0,a.jsxs)(n.ol,{start:"4",children:["\n",(0,a.jsx)(n.li,{children:"网络中断, 请求无法发送到服务器端"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"会触发 xhr 对象下面的 onerror 事件, 在  onerror 事件处理函数中对错误进行处理"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:'xhr.onload = function() {\r\n  ...\r\n}\r\nxhr.onerror = function() {\r\n  alert("网络中断, 无法发送 Ajax 请求")\r\n}\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"低版本浏览器的缓存问题",children:[(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#低版本浏览器的缓存问题",children:"#"}),"低版本浏览器的缓存问题"]}),"\n",(0,a.jsx)(n.p,{children:"问题: 在低版本的 IE 浏览器中, Ajax 请求有严重的缓存问题, 即在请求地址不发生变化的情兄下, 只有第一次请求会真正发送到服务器端, 后续的请求都会从浏览器的缓存中获取结果。\r\n即使服务器端的数据更新了, 客户端依然拿到的是缓存中的旧的数据"}),"\n",(0,a.jsx)(n.p,{children:"解决方案: 在请求地址的后面加请求参数, 保证每一次请求中的请求参数的值不相同"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",meta:"",children:"xhr.open('get','http://www.example.com?t=' + Math.random())\n"})})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(l,e)})):l(e)}let t=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["docs%2Fjs%2F24-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E4%B8%8E%E8%BF%9C%E7%A8%8B%E8%B5%84%E6%BA%90%2F01-XMLHttpRequest%20%E5%AF%B9%E8%B1%A1.md"]={toc:[{id:"ajax的实现步骤",text:"Ajax的实现步骤",depth:2},{id:"ajax-请求参数传递",text:"Ajax 请求参数传递",depth:2},{id:"get-请求方式",text:"GET 请求方式",depth:3},{id:"post-请求方式",text:"POST 请求方式",depth:3},{id:"ajax-获取服务端的响应",text:"Ajax 获取服务端的响应",depth:2},{id:"onload-和onreadystatechange-对比",text:"`onload` 和`onreadystatechange` 对比",depth:2},{id:"ajax-状态码和-http-状态码的区别",text:"Ajax 状态码和 HTTP 状态码的区别",depth:2},{id:"ajax-错误处理",text:"Ajax 错误处理",depth:2},{id:"低版本浏览器的缓存问题",text:"低版本浏览器的缓存问题",depth:2}],title:"ajax",frontmatter:{}}},95895:function(e,n,r){r.d(n,{Z:function(){return t}});var a=r(85893),s=r(67294),d=r(45687);r(6175);let l={"zh-CN":e=>`预计阅读时间: ${e.minutes>=1?`${Math.ceil(e.minutes)} 分钟`:"小于 1 分钟"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function h(e,n,r){let a=Object.keys(l).includes(n)?n:r;return l[a](e)}let t=e=>{let{defaultLocale:n="en-US"}=e,r=(0,d.Vi)().page.readingTimeData,l=(0,d.Jr)(),t=(0,d.e7)(),[c,i]=(0,s.useState)(h(r,l,n));return(0,s.useEffect)(()=>{i(h(r,l,n))},[l,r]),(0,a.jsx)("span",{"data-dark":String(t),className:"rp-reading-time",children:c})}}}]);