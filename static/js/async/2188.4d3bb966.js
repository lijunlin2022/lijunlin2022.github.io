"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["2188"],{1228:function(n,r,e){e.r(r),e.d(r,{default:function(){return c}});var i=e(5893),t=e(65);function l(n){let r=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",pre:"pre",code:"code"},(0,t.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(r.h1,{id:"父组件调用子组件方法",children:["父组件调用子组件方法",(0,i.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#父组件调用子组件方法",children:"#"})]}),"\n",(0,i.jsx)(r.p,{children:"React 使用 Function Components 时，如果父组件要调用子组件的方法，则需要用到三个 Hooks:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"useRef"}),"\n",(0,i.jsx)(r.li,{children:"forwardRef"}),"\n",(0,i.jsx)(r.li,{children:"useImperativeHandle"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"用法如下："}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-jsx",children:"// highlight-next-line\r\nimport { useRef, forwardRef, useImperativeHandle } from 'react'\r\n\r\n// highlight-next-line\r\nconst Child = forwardRef((props, ref) => {\r\n  const printSomething = () =>{\r\n    alert('alert from child function')\r\n  }\r\n  // highlight-next-line\r\n  useImperativeHandle(ref, () => ({\r\n    printSomething: printSomething\r\n  }))\r\n\r\n  return <div>Child Component</div>\r\n})\r\n\r\nconst Parent = (props) => {\r\n  // highlight-next-line\r\n  const childRef = useRef()\r\n\r\n  return (\r\n    <div>\r\n      {/* highlight-next-line */}\r\n      <Child ref={childRef} />\r\n      <button onClick={() => childRef.current.printSomething()}>Click</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Parent\n"})}),"\n",(0,i.jsx)(r.p,{children:"下面是一个实时演示："}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-jsx",meta:"live",children:"function Parent(props) {\r\n\r\n  const Child = forwardRef((props, ref) => {\r\n    const printSomething = () =>{\r\n      alert('alert from child function')\r\n    }\r\n    useImperativeHandle(ref, () => ({\r\n      printSomething: printSomething\r\n    }))\r\n\r\n    return <div>Child Component</div>\r\n  })\r\n\r\n  const childRef = useRef()\r\n\r\n  return (\r\n    <div>\r\n      <Child ref={childRef} />\r\n      <button onClick={() => childRef.current.printSomething()}>Click</button>\r\n    </div>\r\n  )\r\n}\n"})})]})}function h(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,t.ah)(),n.components);return r?(0,i.jsx)(r,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}let c=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["docs%2Freact%2F01-%E7%88%B6%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95.md"]={toc:[],title:"父组件调用子组件方法",frontmatter:{}}}}]);