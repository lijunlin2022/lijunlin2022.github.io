"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([["9793"],{24064:function(r,n,a){a.r(n),a.d(n,{default:()=>m});var t=a("85893"),e=a("50065");let i=a.p+"static/image/translate-matrix.c7e0b1f7.gif",s=a.p+"static/image/scale-matrix.6461dbb0.gif",l=a.p+"static/image/rotate-matrix.b74d9bfd.gif",c=a.p+"static/image/mix-matrix.eb52fe21.gif";function x(r){let n=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code",p:"p",img:"img"},(0,e.ah)(),r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"矩阵实现平移旋转缩放",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#矩阵实现平移旋转缩放",children:"#"}),"矩阵实现平移、旋转、缩放"]}),"\n",(0,t.jsxs)(n.h2,{id:"平移矩阵",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#平移矩阵",children:"#"}),"平移矩阵"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{meta:"",children:"1, 0, 0, 0,\r\n0, 1, 0, 0,\r\n0, 0, 1, 0,\r\nx1, y1, z1, 1,\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:i})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:"",children:"// ... 省略\r\nconst VERTEX_SHADER_SOURCE = `\r\n  attribute vec4 aPosition;\r\n  uniform mat4 mat;\r\n  void main() {\r\n    gl_Position = mat * aPosition;\r\n  }\r\n`\r\n// ... 省略\r\nconst mat = gl.getUniformLocation(program, 'mat')\r\n\r\nfunction getTranslateMatrix(x = 0, y = 0, z = 0) {\r\n  return new Float32Array([\r\n    1.0, 0.0, 0.0, 0.0,\r\n    0.0, 1.0, 0.0, 0.0,\r\n    0.0, 0.0, 1.0, 0.0,\r\n    x, y, z, 1\r\n  ])\r\n}\r\n// ... 省略\r\nlet x = 1\r\n\r\nfunction animation() {\r\n  x += 0.02\r\n  if (x > 1) {\r\n    x = -1\r\n  }\r\n  const matrix = getTranslateMatrix(x, x)\r\n  gl.uniformMatrix4fv(mat, false, matrix)\r\n  gl.drawArrays(gl.TRIANGLES, 0, 3)\r\n  requestAnimationFrame(animation)\r\n}\r\n\r\nanimation()\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"缩放矩阵",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#缩放矩阵",children:"#"}),"缩放矩阵"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{meta:"",children:"tx, 0, 0, 0,\r\n0, ty, 0, 0,\r\n0, 0, 0, tz,\r\n0, 0, 0, 1,\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:s})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:"",children:"// ... 省略\r\nfunction getScaleMatrix(x = 1, y = 1, z = 1) {\r\n  return new Float32Array([\r\n    x, 0.0, 0.0, 0.0,\r\n    0.0, y, 0.0, 0.0,\r\n    0.0, 0.0, z, 0.0,\r\n    0.0, 0.0, 0.0, 1.0\r\n  ])\r\n}\r\n// ... 省略\r\nlet x = 1\r\n\r\nfunction animation() {\r\n  x += 0.01\r\n  if (x > 1.5) {\r\n    x = 1\r\n  }\r\n  const matrix = getScaleMatrix(x, x)\r\n  gl.uniformMatrix4fv(mat, false, matrix)\r\n  gl.drawArrays(gl.TRIANGLES, 0, 3)\r\n  requestAnimationFrame(animation)\r\n}\r\n\r\nanimation()\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"旋转矩阵",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#旋转矩阵",children:"#"}),"旋转矩阵"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{meta:"",children:"cosβ, sinβ, 0.0, 0.0,\r\n-sinβ, cosβ, 0.0, 0.0,\r\n0.0, 0.0, 1.0, 0.0,\r\n0.0, 0.0, 0.0, 1.0,\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:l})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:"",children:"// ... 省略\r\nfunction getRotateMatrix(deg) {\r\n  return new Float32Array([\r\n    Math.cos(deg), Math.sin(deg), 0.0, 0.0,\r\n    -Math.sin(deg), Math.cos(deg), 0.0, 0.0,\r\n    0.0, 0.0, 1.0, 0.0,\r\n    0.0, 0.0, 0.0, 1.0\r\n  ])\r\n}\r\n// ... 省略\r\nlet x = 1\r\n\r\nfunction animation() {\r\n  x += 0.02\r\n  const matrix = getRotateMatrix(x)\r\n  gl.uniformMatrix4fv(mat, false, matrix)\r\n  gl.drawArrays(gl.TRIANGLES, 0, 3)\r\n  requestAnimationFrame(animation)\r\n}\r\n\r\nanimation()\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"复合变化",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#复合变化",children:"#"}),"复合变化"]}),"\n",(0,t.jsx)(n.p,{children:"如果同时存在平移、旋转、缩放的动画，那么可以三个矩阵相乘。"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:c})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:"",children:"// ... 省略\r\nconst VERTEX_SHADER_SOURCE = `\r\n  attribute vec4 aPosition;\r\n  uniform mat4 translateMatrix;\r\n  unifrom mat4 rotateMatrix;\r\n  uniform mat4 scaleMatrix;\r\n\r\n  void main() {\r\n    gl_Position = translateMatrix * rotateMatrix * scaleMatrix * aPosition;\r\n  }\r\n`\r\n// ... 省略\n"})}),"\n",(0,t.jsx)(n.p,{children:"不过这样就需要赋值三个变量，比较复杂，我们可以封装一个矩阵乘法的函数："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",meta:"",children:"// ... 省略\r\nfunction mixMatrix(A, B) {\r\n  const result = new Float32Array(16)\r\n  for (let i = 0; i < 4; i++) {\r\n    result[i] = A[i] * B[0] + A[i + 4] * B[1] + A[i + 8] * B[2] + A[i + 12] * B[3]\r\n    result[i + 4] = A[i] * B[4] + A[i + 4] * B[5] + A[i + 8] * B[6] + A[i + 12] * B[7]\r\n    result[i + 8] = A[i] * B[8] + A[i + 4] * B[9] + A[i + 8] * B[10] + A[i + 12] * B[11]\r\n    result[i + 12] = [i] * B[12] + A[i + 4] * B[13] + A[i + 8] * B[14] + A[i + 12] * B[15]\r\n  }\r\n  return result\r\n}\r\n// ... 省略\r\nlet deg = 0\r\nlet translateX = -1\r\nlet scaleX = 0.1\r\n\r\nfunction animation() {\r\n  deg += 0.01\r\n  translateX += 0.01\r\n  scaleX += 0.01\r\n\r\n  if (translateX > 1) {\r\n    translateX = -1\r\n  }\r\n  if (scaleX > 1.5) {\r\n    scaleX = 0.1\r\n  }\r\n\r\n  const translateMatrix = getTranslateMatrix(translateX)\r\n  const scaleMatrix = getScaleMatrix(scaleX)\r\n  const rotateMatrix = getRotateMatrix(deg)\r\n\r\n  const matrix = mixMatrix(mixMatrix(translateMatrix, scaleMatrix), rotateMatrix)\r\n  gl.uniformMatrix4fv(mat, false, matrix)\r\n  gl.drawArrays(gl.TRIANGLES, 0, 3)\r\n  requestAnimationFrame(animation)\r\n}\r\n\r\nanimation()\n"})})]})}function o(){let r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,e.ah)(),r.components);return n?(0,t.jsx)(n,Object.assign({},r,{children:(0,t.jsx)(x,r)})):x(r)}let m=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["zh%2Fdocs%2Fwebgl%2F09-animation-matrix.md"]={toc:[{id:"平移矩阵",text:"平移矩阵",depth:2},{id:"缩放矩阵",text:"缩放矩阵",depth:2},{id:"旋转矩阵",text:"旋转矩阵",depth:2},{id:"复合变化",text:"复合变化",depth:2}],title:"矩阵实现平移、旋转、缩放",frontmatter:{}}}}]);